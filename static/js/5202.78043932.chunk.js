"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[5202],{5202:(n,e,o)=>{o.r(e),o.d(e,{default:()=>t});const t=[{title:"Unity Basics",examples:[{title:"Basic MonoBehaviour",code:'using UnityEngine;\n\npublic class PlayerController : MonoBehaviour\n{\n    [SerializeField] private float moveSpeed = 5f;\n    [SerializeField] private float jumpForce = 10f;\n    \n    private Rigidbody rb;\n    private bool isGrounded;\n    \n    void Start()\n    {\n        rb = GetComponent<Rigidbody>();\n    }\n    \n    void Update()\n    {\n        // Handle input\n        float horizontalInput = Input.GetAxis("Horizontal");\n        float verticalInput = Input.GetAxis("Vertical");\n        \n        // Move player\n        Vector3 movement = new Vector3(horizontalInput, 0f, verticalInput);\n        transform.Translate(movement * moveSpeed * Time.deltaTime);\n        \n        // Jump\n        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)\n        {\n            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);\n        }\n    }\n    \n    void OnCollisionEnter(Collision collision)\n    {\n        if (collision.gameObject.CompareTag("Ground"))\n        {\n            isGrounded = true;\n        }\n    }\n    \n    void OnCollisionExit(Collision collision)\n    {\n        if (collision.gameObject.CompareTag("Ground"))\n        {\n            isGrounded = false;\n        }\n    }\n}'},{title:"Coroutines and timing",code:"using UnityEngine;\nusing System.Collections;\n\npublic class GameManager : MonoBehaviour\n{\n    [SerializeField] private GameObject enemyPrefab;\n    [SerializeField] private Transform spawnPoint;\n    \n    void Start()\n    {\n        StartCoroutine(SpawnEnemies());\n    }\n    \n    IEnumerator SpawnEnemies()\n    {\n        while (true)\n        {\n            SpawnEnemy();\n            yield return new WaitForSeconds(2f); // Wait 2 seconds\n        }\n    }\n    \n    void SpawnEnemy()\n    {\n        Instantiate(enemyPrefab, spawnPoint.position, spawnPoint.rotation);\n    }\n    \n    // Coroutine with parameters\n    IEnumerator FadeOut(SpriteRenderer sprite, float duration)\n    {\n        Color startColor = sprite.color;\n        Color endColor = new Color(startColor.r, startColor.g, startColor.b, 0f);\n        \n        float elapsed = 0f;\n        while (elapsed < duration)\n        {\n            elapsed += Time.deltaTime;\n            float t = elapsed / duration;\n            sprite.color = Color.Lerp(startColor, endColor, t);\n            yield return null;\n        }\n        \n        sprite.color = endColor;\n    }\n}"}]},{title:"Game Object Management",examples:[{title:"Object pooling for performance",code:"using UnityEngine;\nusing System.Collections.Generic;\n\npublic class ObjectPool : MonoBehaviour\n{\n    [SerializeField] private GameObject prefab;\n    [SerializeField] private int poolSize = 20;\n    \n    private List<GameObject> pool;\n    \n    void Start()\n    {\n        pool = new List<GameObject>();\n        \n        for (int i = 0; i < poolSize; i++)\n        {\n            GameObject obj = Instantiate(prefab);\n            obj.SetActive(false);\n            pool.Add(obj);\n        }\n    }\n    \n    public GameObject GetPooledObject()\n    {\n        for (int i = 0; i < pool.Count; i++)\n        {\n            if (!pool[i].activeInHierarchy)\n            {\n                pool[i].SetActive(true);\n                return pool[i];\n            }\n        }\n        \n        // If no inactive objects, create a new one\n        GameObject newObj = Instantiate(prefab);\n        pool.Add(newObj);\n        return newObj;\n    }\n    \n    public void ReturnToPool(GameObject obj)\n    {\n        obj.SetActive(false);\n    }\n}\n\n// Usage in another script\npublic class BulletSpawner : MonoBehaviour\n{\n    [SerializeField] private ObjectPool bulletPool;\n    \n    void Update()\n    {\n        if (Input.GetMouseButtonDown(0))\n        {\n            GameObject bullet = bulletPool.GetPooledObject();\n            bullet.transform.position = transform.position;\n            bullet.transform.rotation = transform.rotation;\n        }\n    }\n}"},{title:"Singleton pattern for managers",code:'using UnityEngine;\n\npublic class GameManager : MonoBehaviour\n{\n    public static GameManager Instance { get; private set; }\n    \n    public int Score { get; private set; }\n    public bool IsGamePaused { get; private set; }\n    \n    void Awake()\n    {\n        // Singleton pattern\n        if (Instance == null)\n        {\n            Instance = this;\n            DontDestroyOnLoad(gameObject);\n        }\n        else\n        {\n            Destroy(gameObject);\n        }\n    }\n    \n    public void AddScore(int points)\n    {\n        Score += points;\n        Debug.Log($"Score: {Score}");\n    }\n    \n    public void PauseGame()\n    {\n        IsGamePaused = true;\n        Time.timeScale = 0f;\n    }\n    \n    public void ResumeGame()\n    {\n        IsGamePaused = false;\n        Time.timeScale = 1f;\n    }\n}\n\n// Usage in other scripts\npublic class Player : MonoBehaviour\n{\n    void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag("Coin"))\n        {\n            GameManager.Instance.AddScore(10);\n            Destroy(other.gameObject);\n        }\n    }\n}'}]}]}}]);
//# sourceMappingURL=5202.78043932.chunk.js.map