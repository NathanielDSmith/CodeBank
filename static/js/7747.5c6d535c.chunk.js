"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[7747],{7747:(n,t,a)=>{a.r(t),a.d(t,{default:()=>e});const e=[{title:"Async/Await Basics",examples:[{title:"Basic async method",code:'// Async method that returns a Task\npublic async Task<string> GetDataAsync()\n{\n    // Simulate some async work\n    await Task.Delay(1000);\n    return "Data loaded successfully";\n}\n\n// Async method that returns a value\npublic async Task<int> CalculateAsync(int a, int b)\n{\n    await Task.Delay(500); // Simulate work\n    return a + b;\n}\n\n// Usage\npublic async Task Main()\n{\n    var data = await GetDataAsync();\n    Console.WriteLine(data);\n    \n    var result = await CalculateAsync(5, 3);\n    Console.WriteLine($"Result: {result}");\n}'},{title:"Error handling with async",code:'public async Task<string> FetchDataAsync(string url)\n{\n    try\n    {\n        using var client = new HttpClient();\n        var response = await client.GetAsync(url);\n        response.EnsureSuccessStatusCode();\n        return await response.Content.ReadAsStringAsync();\n    }\n    catch (HttpRequestException ex)\n    {\n        Console.WriteLine($"Network error: {ex.Message}");\n        return null;\n    }\n    catch (TaskCanceledException)\n    {\n        Console.WriteLine("Request timed out");\n        return null;\n    }\n}\n\n// Usage with null checking\nvar data = await FetchDataAsync("https://api.example.com/data");\nif (data != null)\n{\n    Console.WriteLine(data);\n}'}]},{title:"Task Operations",examples:[{title:"Running tasks in parallel",code:'public async Task<List<string>> LoadMultipleDataAsync()\n{\n    var tasks = new List<Task<string>>\n    {\n        FetchDataAsync("https://api1.example.com"),\n        FetchDataAsync("https://api2.example.com"),\n        FetchDataAsync("https://api3.example.com")\n    };\n    \n    // Wait for all tasks to complete\n    var results = await Task.WhenAll(tasks);\n    return results.ToList();\n}\n\n// Wait for any task to complete\npublic async Task<string> GetFirstResultAsync()\n{\n    var tasks = new List<Task<string>>\n    {\n        FetchDataAsync("https://api1.example.com"),\n        FetchDataAsync("https://api2.example.com")\n    };\n    \n    var firstResult = await Task.WhenAny(tasks);\n    return await firstResult;\n}'},{title:"Cancellation tokens",code:'public async Task<string> FetchWithTimeoutAsync(string url, int timeoutMs)\n{\n    using var cts = new CancellationTokenSource(timeoutMs);\n    \n    try\n    {\n        using var client = new HttpClient();\n        var response = await client.GetAsync(url, cts.Token);\n        return await response.Content.ReadAsStringAsync();\n    }\n    catch (OperationCanceledException)\n    {\n        Console.WriteLine("Request was cancelled due to timeout");\n        return null;\n    }\n}\n\n// Usage\nvar data = await FetchWithTimeoutAsync("https://api.example.com", 5000);'}]}]}}]);
//# sourceMappingURL=7747.5c6d535c.chunk.js.map