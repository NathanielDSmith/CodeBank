"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[845],{845:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o=[{title:"React Performance Optimization",examples:[{title:"React.memo for Component Memoization",code:"import React from 'react';\n\nconst ExpensiveComponent = React.memo(({ data }) => {\n  return (\n    <div>\n      {data.map(item => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n});\n\n// Only re-renders if props change\nexport default ExpensiveComponent;"},{title:"useMemo for Expensive Calculations",code:"import { useMemo } from 'react';\n\nfunction UserList({ users, filter }) {\n  const filteredUsers = useMemo(() => {\n    return users.filter(user => \n      user.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [users, filter]);\n  \n  return (\n    <div>\n      {filteredUsers.map(user => (\n        <div key={user.id}>{user.name}</div>\n      ))}\n    </div>\n  );\n}"},{title:"useCallback for Function Memoization",code:"import { useCallback } from 'react';\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n  \n  const handleClick = useCallback(() => {\n    console.log('Button clicked');\n  }, []); // Empty dependency array\n  \n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>\n        Count: {count}\n      </button>\n      <ChildComponent onButtonClick={handleClick} />\n    </div>\n  );\n}"},{title:"Code Splitting with React.lazy",code:"import { lazy, Suspense } from 'react';\n\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n\n// LazyComponent.js\nexport default function LazyComponent() {\n  return <div>This component is loaded lazily</div>;\n}"},{title:"Virtual Scrolling for Large Lists",code:"import { FixedSizeList as List } from 'react-window';\n\nfunction VirtualizedList({ items }) {\n  const Row = ({ index, style }) => (\n    <div style={style}>\n      {items[index].name}\n    </div>\n  );\n  \n  return (\n    <List\n      height={400}\n      itemCount={items.length}\n      itemSize={35}\n    >\n      {Row}\n    </List>\n  );\n}"}]}]}}]);
//# sourceMappingURL=845.849b36e3.chunk.js.map