"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[3475],{3475:(n,t,i)=>{i.r(t),i.d(t,{default:()=>e});const e=[{title:"Goroutines Basics",examples:[{title:"Simple goroutines",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\n// Function that will run as a goroutine\nfunc sayHello(name string) {\n    fmt.Println("Hello from", name)\n}\n\nfunc main() {\n    // Start a goroutine (runs in background)\n    go sayHello("Alice")\n    \n    // Start another goroutine\n    go sayHello("Bob")\n    \n    // Main function continues immediately\n    fmt.Println("Main function continues...")\n    \n    // Wait a bit so we can see the goroutines run\n    time.Sleep(1 * time.Second)\n    \n    fmt.Println("Main function ends")\n}'},{title:"Multiple goroutines",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc countNumbers(name string) {\n    for i := 1; i <= 5; i++ {\n        fmt.Printf("%s: %d\n", name, i)\n        time.Sleep(100 * time.Millisecond)\n    }\n}\n\nfunc main() {\n    // Start multiple goroutines\n    go countNumbers("Counter A")\n    go countNumbers("Counter B")\n    go countNumbers("Counter C")\n    \n    // Main function waits\n    time.Sleep(1 * time.Second)\n    \n    fmt.Println("All counters finished!")\n}'}]},{title:"Anonymous Functions",examples:[{title:"Goroutines with anonymous functions",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    // Start goroutine with anonymous function\n    go func() {\n        fmt.Println("Hello from anonymous function!")\n    }()\n    \n    // Start goroutine with parameters\n    go func(name string) {\n        fmt.Println("Hello", name)\n    }("Alice")\n    \n    // Wait for goroutines to finish\n    time.Sleep(500 * time.Millisecond)\n    \n    fmt.Println("Main function ends")\n}'},{title:"Goroutines with loops",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    // Start 5 goroutines in a loop\n    for i := 1; i <= 5; i++ {\n        go func(id int) {\n            fmt.Printf("Worker %d starting\n", id)\n            time.Sleep(200 * time.Millisecond)\n            fmt.Printf("Worker %d finished\n", id)\n        }(i)\n    }\n    \n    // Wait for all workers\n    time.Sleep(1 * time.Second)\n    fmt.Println("All workers finished!")\n}'}]}]}}]);
//# sourceMappingURL=3475.bdaece30.chunk.js.map