{"version":3,"file":"static/js/2588.37d827b8.chunk.js","mappings":"kIAAA,MAiJA,EAjJsB,CACpB,CACEA,MAAO,2BACPC,SAAU,CACR,CACED,MAAO,8BACPE,KAAK,6OAWP,CACEF,MAAO,YACPE,KAAK,sOAWX,CACEF,MAAO,sBACPC,SAAU,CACR,CACED,MAAO,eACPE,KAAK,onBA0BP,CACEF,MAAO,oBACPE,KAAK,4jBA2BX,CACEF,MAAO,cACPC,SAAU,CACR,CACED,MAAO,mBACPE,KAAK,ogBAsBP,CACEF,MAAO,aACPE,KAAK,qe","sources":["data/csharp/basics.ts"],"sourcesContent":["const basicsContent = [\r\n  {\r\n    title: 'Variables and Data Types',\r\n    examples: [\r\n      {\r\n        title: 'Basic variable declarations',\r\n        code: `// Simple variables\r\nint age = 25;\r\nstring name = \"John\";\r\ndouble price = 19.99;\r\nbool isActive = true;\r\n\r\n// Print to console\r\nConsole.WriteLine(\"Hello World\");\r\nConsole.WriteLine(\"Age: \" + age);\r\nConsole.WriteLine(\"Name: \" + name);`\r\n      },\r\n      {\r\n        title: 'Constants',\r\n        code: `// Constants - values that never change\r\nconst double PI = 3.14159;\r\nconst string COMPANY_NAME = \"My Company\";\r\n\r\n// Use constants\r\ndouble radius = 5;\r\ndouble area = PI * radius * radius;\r\nConsole.WriteLine(\"Area: \" + area);`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Classes and Objects',\r\n    examples: [\r\n      {\r\n        title: 'Simple class',\r\n        code: `// Define a class\r\npublic class Person\r\n{\r\n    // Properties (variables that belong to the class)\r\n    public string Name;\r\n    public int Age;\r\n    \r\n    // Constructor - runs when we create a new Person\r\n    public Person(string name, int age)\r\n    {\r\n        Name = name;\r\n        Age = age;\r\n    }\r\n    \r\n    // Method - function that belongs to the class\r\n    public void SayHello()\r\n    {\r\n        Console.WriteLine(\"Hello, I'm \" + Name);\r\n    }\r\n}\r\n\r\n// Create and use a Person object\r\nPerson person = new Person(\"Alice\", 30);\r\nperson.SayHello();\r\nConsole.WriteLine(person.Name + \" is \" + person.Age + \" years old\");`\r\n      },\r\n      {\r\n        title: 'Simple properties',\r\n        code: `public class Product\r\n{\r\n    // Auto-property - C# creates the get/set for you\r\n    public string Name { get; set; }\r\n    public decimal Price { get; set; }\r\n    \r\n    // Constructor\r\n    public Product(string name, decimal price)\r\n    {\r\n        Name = name;\r\n        Price = price;\r\n    }\r\n    \r\n    // Method to display product info\r\n    public void DisplayInfo()\r\n    {\r\n        Console.WriteLine(\"Product: \" + Name);\r\n        Console.WriteLine(\"Price: $\" + Price);\r\n    }\r\n}\r\n\r\n// Usage\r\nProduct product = new Product(\"Laptop\", 999.99m);\r\nproduct.DisplayInfo();`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Collections',\r\n    examples: [\r\n      {\r\n        title: 'Arrays and Lists',\r\n        code: `// Array - fixed size\r\nstring[] colors = { \"Red\", \"Green\", \"Blue\" };\r\nint[] numbers = new int[3]; // Empty array with 3 spaces\r\n\r\n// List - can grow and shrink\r\nList<string> fruits = new List<string>();\r\nfruits.Add(\"Apple\");\r\nfruits.Add(\"Banana\");\r\nfruits.Add(\"Orange\");\r\n\r\n// Loop through a list\r\nfor (int i = 0; i < fruits.Count; i++)\r\n{\r\n    Console.WriteLine(\"Fruit \" + i + \": \" + fruits[i]);\r\n}\r\n\r\n// Or use foreach (easier)\r\nforeach (string fruit in fruits)\r\n{\r\n    Console.WriteLine(\"I like \" + fruit);\r\n}`\r\n      },\r\n      {\r\n        title: 'Dictionary',\r\n        code: `// Dictionary - key-value pairs\r\nDictionary<string, int> scores = new Dictionary<string, int>();\r\n\r\n// Add items\r\nscores.Add(\"Alice\", 95);\r\nscores.Add(\"Bob\", 87);\r\nscores.Add(\"Charlie\", 92);\r\n\r\n// Get a value\r\nint aliceScore = scores[\"Alice\"];\r\nConsole.WriteLine(\"Alice's score: \" + aliceScore);\r\n\r\n// Check if key exists\r\nif (scores.ContainsKey(\"David\"))\r\n{\r\n    Console.WriteLine(\"David's score: \" + scores[\"David\"]);\r\n}\r\nelse\r\n{\r\n    Console.WriteLine(\"David not found\");\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default basicsContent; "],"names":["title","examples","code"],"sourceRoot":""}