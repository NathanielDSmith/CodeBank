"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[4627],{4627:(n,r,e)=>{e.r(r),e.d(r,{default:()=>t});const t=[{title:"Advanced Array Patterns",examples:[{title:"Memoization with Arrays",code:"// Memoized array operations\nfunction memoizedArrayOperation() {\n  const cache = new Map();\n  \n  return function(array, operation) {\n    const key = JSON.stringify(array) + operation.name;\n    \n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    const result = operation(array);\n    cache.set(key, result);\n    return result;\n  };\n}\n\nconst memoized = memoizedArrayOperation();\n\nconst expensiveOperation = (arr) => {\n  // Simulate expensive computation\n  return arr.reduce((sum, num) => sum + Math.pow(num, 2), 0);\n};\n\nconst data = [1, 2, 3, 4, 5];\nconsole.log(memoized(data, expensiveOperation)); // Computed\nconsole.log(memoized(data, expensiveOperation)); // Cached"},{title:"Array Decorators",code:"// Array method decorators\nfunction withLogging(target, propertyKey, descriptor) {\n  const originalMethod = descriptor.value;\n  \n  descriptor.value = function(...args) {\n    console.log(`Calling ${propertyKey} with args:`, args);\n    const result = originalMethod.apply(this, args);\n    console.log(`Result:`, result);\n    return result;\n  };\n  \n  return descriptor;\n}\n\nclass ArrayProcessor {\n  @withLogging\n  static filterEvenNumbers(array) {\n    return array.filter(num => num % 2 === 0);\n  }\n  \n  @withLogging\n  static doubleNumbers(array) {\n    return array.map(num => num * 2);\n  }\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6];\nArrayProcessor.filterEvenNumbers(numbers);\nArrayProcessor.doubleNumbers(numbers);"}]},{title:"Functional Programming Patterns",examples:[{title:"Point-Free Style",code:"// Point-free array operations\nconst pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\nconst compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);\n\n// Utility functions\nconst filter = fn => arr => arr.filter(fn);\nconst map = fn => arr => arr.map(fn);\nconst reduce = fn => initial => arr => arr.reduce(fn, initial);\n\n// Point-free operations\nconst isEven = num => num % 2 === 0;\nconst double = num => num * 2;\nconst sum = (a, b) => a + b;\n\nconst processNumbers = pipe(\n  filter(isEven),\n  map(double),\n  reduce(sum)(0)\n);\n\nconst numbers = [1, 2, 3, 4, 5, 6];\nconsole.log(processNumbers(numbers)); // 24 (2+4+6 doubled)"},{title:"Monadic Operations",code:"// Maybe monad for safe array operations\nclass Maybe {\n  constructor(value) {\n    this.value = value;\n  }\n  \n  static of(value) {\n    return new Maybe(value);\n  }\n  \n  map(fn) {\n    return this.value === null || this.value === undefined\n      ? Maybe.of(null)\n      : Maybe.of(fn(this.value));\n  }\n  \n  flatMap(fn) {\n    return this.map(fn).join();\n  }\n  \n  join() {\n    return this.value instanceof Maybe ? this.value : this;\n  }\n}\n\n// Safe array operations\nconst safeArrayOperation = (array, operation) => {\n  return Maybe.of(array)\n    .map(arr => Array.isArray(arr) ? arr : null)\n    .map(operation)\n    .map(result => result || []);\n};\n\nconst numbers = [1, 2, 3, 4, 5];\nconst result = safeArrayOperation(numbers, arr => arr.filter(n => n > 3));\nconsole.log(result.value); // [4, 5]"}]},{title:"Iterator Patterns",examples:[{title:"Custom Array Iterators",code:"// Custom array iterator with filtering\nclass FilteredArrayIterator {\n  constructor(array, predicate) {\n    this.array = array;\n    this.predicate = predicate;\n    this.index = 0;\n  }\n\n  next() {\n    while (this.index < this.array.length) {\n      const item = this.array[this.index];\n      this.index++;\n      \n      if (this.predicate(item)) {\n        return { value: item, done: false };\n      }\n    }\n    \n    return { done: true };\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenIterator = new FilteredArrayIterator(numbers, num => num % 2 === 0);\n\nfor (const even of evenIterator) {\n  console.log(even); // 2, 4, 6, 8, 10\n}"},{title:"Generator-Based Iterators",code:"// Generator for array combinations\nfunction* arrayCombinations(array, size) {\n  if (size === 1) {\n    for (const item of array) {\n      yield [item];\n    }\n    return;\n  }\n  \n  for (let i = 0; i <= array.length - size; i++) {\n    const first = array[i];\n    const remaining = array.slice(i + 1);\n    \n    for (const combination of arrayCombinations(remaining, size - 1)) {\n      yield [first, ...combination];\n    }\n  }\n}\n\nconst items = ['a', 'b', 'c'];\nfor (const combo of arrayCombinations(items, 2)) {\n  console.log(combo);\n}\n// Output: ['a', 'b'], ['a', 'c'], ['b', 'c']"}]},{title:"Optimization Patterns",examples:[{title:"Lazy Evaluation",code:"// Lazy array operations\nclass LazyArray {\n  constructor(array) {\n    this.array = array;\n    this.operations = [];\n  }\n  \n  filter(predicate) {\n    this.operations.push({ type: 'filter', fn: predicate });\n    return this;\n  }\n  \n  map(transform) {\n    this.operations.push({ type: 'map', fn: transform });\n    return this;\n  }\n  \n  execute() {\n    let result = [...this.array];\n    \n    for (const operation of this.operations) {\n      if (operation.type === 'filter') {\n        result = result.filter(operation.fn);\n      } else if (operation.type === 'map') {\n        result = result.map(operation.fn);\n      }\n    }\n    \n    return result;\n  }\n}\n\nconst lazyArray = new LazyArray([1, 2, 3, 4, 5, 6])\n  .filter(num => num % 2 === 0)\n  .map(num => num * 2);\n\nconsole.log(lazyArray.execute()); // [4, 8, 12]"},{title:"Memory-Efficient Processing",code:"// Stream-like array processing\nclass ArrayStream {\n  constructor(array) {\n    this.array = array;\n    this.index = 0;\n  }\n  \n  hasNext() {\n    return this.index < this.array.length;\n  }\n  \n  next() {\n    return this.array[this.index++];\n  }\n  \n  forEach(consumer) {\n    while (this.hasNext()) {\n      consumer(this.next());\n    }\n  }\n  \n  collect() {\n    const result = [];\n    this.forEach(item => result.push(item));\n    return result;\n  }\n}\n\nconst stream = new ArrayStream([1, 2, 3, 4, 5]);\nstream.forEach(item => console.log(`Processing: ${item}`));"}]}]}}]);
//# sourceMappingURL=4627.443805b0.chunk.js.map