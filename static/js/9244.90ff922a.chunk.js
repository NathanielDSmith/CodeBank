"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[9244],{9244:(n,e,t)=>{t.r(e),t.d(e,{default:()=>s});const s=[{title:"Common Design Patterns",examples:[{title:"Observer pattern",code:'// Observer pattern for event handling\npublic interface IObserver\n{\n    void Update(string message);\n}\n\npublic class Subject\n{\n    private List<IObserver> observers = new List<IObserver>();\n    \n    public void Attach(IObserver observer)\n    {\n        observers.Add(observer);\n    }\n    \n    public void Detach(IObserver observer)\n    {\n        observers.Remove(observer);\n    }\n    \n    public void Notify(string message)\n    {\n        foreach (var observer in observers)\n        {\n            observer.Update(message);\n        }\n    }\n}\n\npublic class Logger : IObserver\n{\n    public void Update(string message)\n    {\n        Console.WriteLine($"[LOG] {message}");\n    }\n}\n\npublic class EmailNotifier : IObserver\n{\n    public void Update(string message)\n    {\n        Console.WriteLine($"[EMAIL] Sending notification: {message}");\n    }\n}\n\n// Usage\nvar subject = new Subject();\nsubject.Attach(new Logger());\nsubject.Attach(new EmailNotifier());\nsubject.Notify("User logged in");'},{title:"Factory pattern",code:'// Factory pattern for object creation\npublic interface IAnimal\n{\n    void MakeSound();\n}\n\npublic class Dog : IAnimal\n{\n    public void MakeSound()\n    {\n        Console.WriteLine("Woof!");\n    }\n}\n\npublic class Cat : IAnimal\n{\n    public void MakeSound()\n    {\n        Console.WriteLine("Meow!");\n    }\n}\n\npublic class AnimalFactory\n{\n    public IAnimal CreateAnimal(string animalType)\n    {\n        return animalType.ToLower() switch\n        {\n            "dog" => new Dog(),\n            "cat" => new Cat(),\n            _ => throw new ArgumentException($"Unknown animal type: {animalType}")\n        };\n    }\n}\n\n// Usage\nvar factory = new AnimalFactory();\nvar dog = factory.CreateAnimal("dog");\nvar cat = factory.CreateAnimal("cat");\n\ndog.MakeSound(); // Woof!\ncat.MakeSound(); // Meow!'}]},{title:"Advanced Patterns",examples:[{title:"Repository pattern",code:"// Repository pattern for data access\npublic interface IRepository<T>\n{\n    Task<T> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task DeleteAsync(int id);\n}\n\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class UserRepository : IRepository<User>\n{\n    private readonly ApplicationDbContext _context;\n    \n    public UserRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n    \n    public async Task<User> GetByIdAsync(int id)\n    {\n        return await _context.Users.FindAsync(id);\n    }\n    \n    public async Task<IEnumerable<User>> GetAllAsync()\n    {\n        return await _context.Users.ToListAsync();\n    }\n    \n    public async Task<User> AddAsync(User user)\n    {\n        _context.Users.Add(user);\n        await _context.SaveChangesAsync();\n        return user;\n    }\n    \n    public async Task UpdateAsync(User user)\n    {\n        _context.Users.Update(user);\n        await _context.SaveChangesAsync();\n    }\n    \n    public async Task DeleteAsync(int id)\n    {\n        var user = await GetByIdAsync(id);\n        if (user != null)\n        {\n            _context.Users.Remove(user);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n\n// Usage with dependency injection\npublic class UserService\n{\n    private readonly IRepository<User> _userRepository;\n    \n    public UserService(IRepository<User> userRepository)\n    {\n        _userRepository = userRepository;\n    }\n    \n    public async Task<User> GetUserAsync(int id)\n    {\n        return await _userRepository.GetByIdAsync(id);\n    }\n}"},{title:"Strategy pattern",code:'// Strategy pattern for different algorithms\npublic interface IPaymentStrategy\n{\n    void ProcessPayment(decimal amount);\n}\n\npublic class CreditCardPayment : IPaymentStrategy\n{\n    public void ProcessPayment(decimal amount)\n    {\n        Console.WriteLine("Processing credit card payment: $" + amount);\n    }\n}\n\npublic class PayPalPayment : IPaymentStrategy\n{\n    public void ProcessPayment(decimal amount)\n    {\n        Console.WriteLine("Processing PayPal payment: $" + amount);\n    }\n}\n\npublic class CryptoPayment : IPaymentStrategy\n{\n    public void ProcessPayment(decimal amount)\n    {\n        Console.WriteLine("Processing crypto payment: $" + amount);\n    }\n}\n\npublic class PaymentProcessor\n{\n    private IPaymentStrategy _strategy;\n    \n    public void SetPaymentStrategy(IPaymentStrategy strategy)\n    {\n        _strategy = strategy;\n    }\n    \n    public void ProcessPayment(decimal amount)\n    {\n        _strategy?.ProcessPayment(amount);\n    }\n}\n\n// Usage\nvar processor = new PaymentProcessor();\n\nprocessor.SetPaymentStrategy(new CreditCardPayment());\nprocessor.ProcessPayment(100.00m);\n\nprocessor.SetPaymentStrategy(new PayPalPayment());\nprocessor.ProcessPayment(50.00m);\n\nprocessor.SetPaymentStrategy(new CryptoPayment());\nprocessor.ProcessPayment(25.00m);'}]}]}}]);
//# sourceMappingURL=9244.90ff922a.chunk.js.map