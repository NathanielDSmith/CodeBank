{"version":3,"file":"static/js/8692.1bb82ff0.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,oBACPC,KAAK,+RAgBP,CACED,MAAO,iCACPC,KAAK,6cAuBP,CACED,MAAO,oCACPC,KAAK,kXAoBP,CACED,MAAO,qCACPC,KAAK,umBA0BP,CACED,MAAO,qBACPC,KAAK,4b","sources":["data/go/web.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: \"Basic HTTP Server\",\r\n    code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\r\n        fmt.Fprintf(w, \"Hello, Go!\")\r\n    })\r\n    \r\n    fmt.Println(\"Server starting on :8080\")\r\n    http.ListenAndServe(\":8080\", nil)\r\n}`\r\n  },\r\n  {\r\n    title: \"HTTP Server with JSON Response\",\r\n    code: `package main\r\n\r\nimport (\r\n    \"encoding/json\"\r\n    \"net/http\"\r\n)\r\n\r\ntype User struct {\r\n    Name string \\`json:\"name\"\\`\r\n    Age  int    \\`json:\"age\"\\`\r\n}\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) {\r\n        user := User{Name: \"Alice\", Age: 30}\r\n        \r\n        w.Header().Set(\"Content-Type\", \"application/json\")\r\n        json.NewEncoder(w).Encode(user)\r\n    })\r\n    \r\n    http.ListenAndServe(\":8080\", nil)\r\n}`\r\n  },\r\n  {\r\n    title: \"HTTP Server with Query Parameters\",\r\n    code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/greet\", func(w http.ResponseWriter, r *http.Request) {\r\n        name := r.URL.Query().Get(\"name\")\r\n        if name == \"\" {\r\n            name = \"World\"\r\n        }\r\n        \r\n        fmt.Fprintf(w, \"Hello, %s!\", name)\r\n    })\r\n    \r\n    http.ListenAndServe(\":8080\", nil)\r\n}`\r\n  },\r\n  {\r\n    title: \"HTTP Server with Different Methods\",\r\n    code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/api/users\", func(w http.ResponseWriter, r *http.Request) {\r\n        switch r.Method {\r\n        case \"GET\":\r\n            fmt.Fprintf(w, \"Getting users\")\r\n        case \"POST\":\r\n            fmt.Fprintf(w, \"Creating user\")\r\n        case \"PUT\":\r\n            fmt.Fprintf(w, \"Updating user\")\r\n        case \"DELETE\":\r\n            fmt.Fprintf(w, \"Deleting user\")\r\n        default:\r\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\r\n        }\r\n    })\r\n    \r\n    http.ListenAndServe(\":8080\", nil)\r\n}`\r\n  },\r\n  {\r\n    title: \"Static File Server\",\r\n    code: `package main\r\n\r\nimport (\r\n    \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n    // Serve static files from \"static\" directory\r\n    fs := http.FileServer(http.Dir(\"static\"))\r\n    http.Handle(\"/static/\", http.StripPrefix(\"/static/\", fs))\r\n    \r\n    // Serve index.html at root\r\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\r\n        http.ServeFile(w, r, \"static/index.html\")\r\n    })\r\n    \r\n    http.ListenAndServe(\":8080\", nil)\r\n}`\r\n  }\r\n]; "],"names":["title","code"],"sourceRoot":""}