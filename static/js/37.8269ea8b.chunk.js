"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[37],{37:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r=[{title:"Advanced C# Features",examples:[{title:"Records and pattern matching",code:'// Records (C# 9.0+)\npublic record Person(string Name, int Age);\n\npublic record Employee(string Name, int Age, string Department) : Person(Name, Age);\n\n// Pattern matching\npublic string GetDisplayName(object obj)\n{\n    return obj switch\n    {\n        Person p => $"Person: {p.Name}",\n        Employee e => $"Employee: {e.Name} ({e.Department})",\n        string s => $"String: {s}",\n        int i => $"Number: {i}",\n        _ => "Unknown type"\n    };\n}\n\n// Usage\nvar person = new Person("Alice", 30);\nvar employee = new Employee("Bob", 25, "Engineering");\n\nConsole.WriteLine(GetDisplayName(person));    // Person: Alice\nConsole.WriteLine(GetDisplayName(employee));  // Employee: Bob (Engineering)\nConsole.WriteLine(GetDisplayName("Hello"));   // String: Hello'},{title:"Extension methods",code:'// Extension methods\npublic static class StringExtensions\n{\n    public static bool IsPalindrome(this string str)\n    {\n        var clean = str.ToLower().Replace(" ", "");\n        return clean == new string(clean.Reverse().ToArray());\n    }\n    \n    public static string ToTitleCase(this string str)\n    {\n        if (string.IsNullOrEmpty(str))\n            return str;\n            \n        return char.ToUpper(str[0]) + str.Substring(1).ToLower();\n    }\n}\n\npublic static class EnumerableExtensions\n{\n    public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source)\n    {\n        var random = new Random();\n        return source.OrderBy(x => random.Next());\n    }\n}\n\n// Usage\nstring text = "racecar";\nConsole.WriteLine(text.IsPalindrome()); // True\n\nstring name = "john doe";\nConsole.WriteLine(name.ToTitleCase()); // John doe\n\nvar numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar shuffled = numbers.Shuffle();'}]},{title:"Reflection and Attributes",examples:[{title:"Custom attributes",code:'// Custom attribute\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]\npublic class AuthorAttribute : Attribute\n{\n    public string Name { get; }\n    public string Version { get; }\n    \n    public AuthorAttribute(string name, string version = "1.0")\n    {\n        Name = name;\n        Version = version;\n    }\n}\n\n// Using the attribute\n[Author("John Doe", "2.0")]\npublic class Calculator\n{\n    [Author("Jane Smith")]\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}\n\n// Reading attributes with reflection\npublic static void PrintAuthorInfo(Type type)\n{\n    var authorAttr = type.GetCustomAttribute<AuthorAttribute>();\n    if (authorAttr != null)\n    {\n        Console.WriteLine($"Author: {authorAttr.Name}, Version: {authorAttr.Version}");\n    }\n}\n\n// Usage\nPrintAuthorInfo(typeof(Calculator));'},{title:"Dynamic programming",code:'// Dynamic programming with reflection\npublic class DynamicCalculator\n{\n    public dynamic Add(dynamic a, dynamic b)\n    {\n        return a + b;\n    }\n    \n    public dynamic Multiply(dynamic a, dynamic b)\n    {\n        return a * b;\n    }\n}\n\n// Using dynamic\npublic void ProcessData()\n{\n    dynamic calculator = new DynamicCalculator();\n    \n    // Works with different types\n    var result1 = calculator.Add(5, 3);        // 8\n    var result2 = calculator.Add("Hello", " World"); // "Hello World"\n    var result3 = calculator.Multiply(4, 2.5); // 10.0\n    \n    Console.WriteLine(result1);\n    Console.WriteLine(result2);\n    Console.WriteLine(result3);\n}\n\n// ExpandoObject for dynamic properties\npublic void CreateDynamicObject()\n{\n    dynamic person = new ExpandoObject();\n    person.Name = "Alice";\n    person.Age = 30;\n    person.SayHello = new Action(() => Console.WriteLine($"Hello, I\'m {person.Name}"));\n    \n    person.SayHello(); // Hello, I\'m Alice\n    Console.WriteLine($"{person.Name} is {person.Age} years old");\n}'}]}]}}]);
//# sourceMappingURL=37.8269ea8b.chunk.js.map