{"version":3,"file":"static/js/7747.5c6d535c.chunk.js","mappings":"kIAAA,MAyHA,EAzHqB,CACnB,CACEA,MAAO,qBACPC,SAAU,CACR,CACED,MAAO,qBACPE,KAAK,ijBAyBP,CACEF,MAAO,4BACPE,KAAK,urBA8BX,CACEF,MAAO,kBACPC,SAAU,CACR,CACED,MAAO,4BACPE,KAAK,iuBA2BP,CACEF,MAAO,sBACPE,KAAK,+jB","sources":["data/csharp/async.ts"],"sourcesContent":["const asyncContent = [\r\n  {\r\n    title: 'Async/Await Basics',\r\n    examples: [\r\n      {\r\n        title: 'Basic async method',\r\n        code: `// Async method that returns a Task\r\npublic async Task<string> GetDataAsync()\r\n{\r\n    // Simulate some async work\r\n    await Task.Delay(1000);\r\n    return \"Data loaded successfully\";\r\n}\r\n\r\n// Async method that returns a value\r\npublic async Task<int> CalculateAsync(int a, int b)\r\n{\r\n    await Task.Delay(500); // Simulate work\r\n    return a + b;\r\n}\r\n\r\n// Usage\r\npublic async Task Main()\r\n{\r\n    var data = await GetDataAsync();\r\n    Console.WriteLine(data);\r\n    \r\n    var result = await CalculateAsync(5, 3);\r\n    Console.WriteLine($\"Result: {result}\");\r\n}`\r\n      },\r\n      {\r\n        title: 'Error handling with async',\r\n        code: `public async Task<string> FetchDataAsync(string url)\r\n{\r\n    try\r\n    {\r\n        using var client = new HttpClient();\r\n        var response = await client.GetAsync(url);\r\n        response.EnsureSuccessStatusCode();\r\n        return await response.Content.ReadAsStringAsync();\r\n    }\r\n    catch (HttpRequestException ex)\r\n    {\r\n        Console.WriteLine($\"Network error: {ex.Message}\");\r\n        return null;\r\n    }\r\n    catch (TaskCanceledException)\r\n    {\r\n        Console.WriteLine(\"Request timed out\");\r\n        return null;\r\n    }\r\n}\r\n\r\n// Usage with null checking\r\nvar data = await FetchDataAsync(\"https://api.example.com/data\");\r\nif (data != null)\r\n{\r\n    Console.WriteLine(data);\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Task Operations',\r\n    examples: [\r\n      {\r\n        title: 'Running tasks in parallel',\r\n        code: `public async Task<List<string>> LoadMultipleDataAsync()\r\n{\r\n    var tasks = new List<Task<string>>\r\n    {\r\n        FetchDataAsync(\"https://api1.example.com\"),\r\n        FetchDataAsync(\"https://api2.example.com\"),\r\n        FetchDataAsync(\"https://api3.example.com\")\r\n    };\r\n    \r\n    // Wait for all tasks to complete\r\n    var results = await Task.WhenAll(tasks);\r\n    return results.ToList();\r\n}\r\n\r\n// Wait for any task to complete\r\npublic async Task<string> GetFirstResultAsync()\r\n{\r\n    var tasks = new List<Task<string>>\r\n    {\r\n        FetchDataAsync(\"https://api1.example.com\"),\r\n        FetchDataAsync(\"https://api2.example.com\")\r\n    };\r\n    \r\n    var firstResult = await Task.WhenAny(tasks);\r\n    return await firstResult;\r\n}`\r\n      },\r\n      {\r\n        title: 'Cancellation tokens',\r\n        code: `public async Task<string> FetchWithTimeoutAsync(string url, int timeoutMs)\r\n{\r\n    using var cts = new CancellationTokenSource(timeoutMs);\r\n    \r\n    try\r\n    {\r\n        using var client = new HttpClient();\r\n        var response = await client.GetAsync(url, cts.Token);\r\n        return await response.Content.ReadAsStringAsync();\r\n    }\r\n    catch (OperationCanceledException)\r\n    {\r\n        Console.WriteLine(\"Request was cancelled due to timeout\");\r\n        return null;\r\n    }\r\n}\r\n\r\n// Usage\r\nvar data = await FetchWithTimeoutAsync(\"https://api.example.com\", 5000);`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default asyncContent; "],"names":["title","examples","code"],"sourceRoot":""}