{"version":3,"file":"static/js/5949.5ca9676c.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,qBACPC,KAAK,0gBAiCP,CACED,MAAO,6BACPC,KAAK,iaA8BP,CACED,MAAO,sBACPC,KAAK,+kBAkCP,CACED,MAAO,uCACPC,KAAK,u6BAqDP,CACED,MAAO,yBACPC,KAAK,oqC","sources":["data/go/packages.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: \"Creating a Package\",\r\n    code: `// mathutils/math.go\r\npackage mathutils\r\n\r\nfunc Add(a, b int) int {\r\n    return a + b\r\n}\r\n\r\nfunc Multiply(a, b int) int {\r\n    return a * b\r\n}\r\n\r\nfunc IsEven(n int) bool {\r\n    return n%2 == 0\r\n}\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"./mathutils\"\r\n)\r\n\r\nfunc main() {\r\n    result := mathutils.Add(5, 3)\r\n    fmt.Printf(\"5 + 3 = %d\\\\n\", result)\r\n    \r\n    product := mathutils.Multiply(4, 6)\r\n    fmt.Printf(\"4 * 6 = %d\\\\n\", product)\r\n    \r\n    fmt.Printf(\"Is 10 even? %t\\\\n\", mathutils.IsEven(10))\r\n}`\r\n  },\r\n  {\r\n    title: \"Package with Init Function\",\r\n    code: `// config/config.go\r\npackage config\r\n\r\nimport \"fmt\"\r\n\r\nvar AppName string\r\nvar Version string\r\n\r\nfunc init() {\r\n    AppName = \"MyApp\"\r\n    Version = \"1.0.0\"\r\n    fmt.Println(\"Config package initialized\")\r\n}\r\n\r\nfunc GetInfo() string {\r\n    return fmt.Sprintf(\"%s v%s\", AppName, Version)\r\n}\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"./config\"\r\n)\r\n\r\nfunc main() {\r\n    fmt.Println(config.GetInfo())\r\n}`\r\n  },\r\n  {\r\n    title: \"Go Modules (go.mod)\",\r\n    code: `// go.mod\r\nmodule myproject\r\n\r\ngo 1.21\r\n\r\nrequire (\r\n    github.com/gorilla/mux v1.8.0\r\n    github.com/joho/godotenv v1.4.0\r\n)\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"github.com/gorilla/mux\"\r\n    \"github.com/joho/godotenv\"\r\n)\r\n\r\nfunc main() {\r\n    // Load environment variables\r\n    godotenv.Load()\r\n    \r\n    // Create router\r\n    r := mux.NewRouter()\r\n    \r\n    r.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\r\n        fmt.Fprintf(w, \"Hello from Go module!\")\r\n    })\r\n    \r\n    fmt.Println(\"Server starting...\")\r\n    http.ListenAndServe(\":8080\", r)\r\n}`\r\n  },\r\n  {\r\n    title: \"Package with Exported and Unexported\",\r\n    code: `// user/user.go\r\npackage user\r\n\r\nimport \"fmt\"\r\n\r\n// Exported (capitalized) - accessible from other packages\r\ntype User struct {\r\n    Name string\r\n    Age  int\r\n}\r\n\r\n// Unexported (lowercase) - only accessible within this package\r\ntype userConfig struct {\r\n    maxAge int\r\n    minAge int\r\n}\r\n\r\n// Exported function\r\nfunc NewUser(name string, age int) *User {\r\n    config := getUserConfig()\r\n    \r\n    if age < config.minAge || age > config.maxAge {\r\n        return nil\r\n    }\r\n    \r\n    return &User{Name: name, Age: age}\r\n}\r\n\r\n// Unexported function\r\nfunc getUserConfig() userConfig {\r\n    return userConfig{minAge: 0, maxAge: 150}\r\n}\r\n\r\n// Exported method\r\nfunc (u *User) Display() {\r\n    fmt.Printf(\"User: %s, Age: %d\\\\n\", u.Name, u.Age)\r\n}\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"./user\"\r\n)\r\n\r\nfunc main() {\r\n    newUser := user.NewUser(\"Alice\", 30)\r\n    if newUser != nil {\r\n        newUser.Display()\r\n    }\r\n}`\r\n  },\r\n  {\r\n    title: \"Package with Interface\",\r\n    code: `// storage/storage.go\r\npackage storage\r\n\r\ntype Storage interface {\r\n    Save(key string, value string) error\r\n    Get(key string) (string, error)\r\n    Delete(key string) error\r\n}\r\n\r\n// memory/memory.go\r\npackage memory\r\n\r\nimport \"fmt\"\r\n\r\ntype MemoryStorage struct {\r\n    data map[string]string\r\n}\r\n\r\nfunc NewMemoryStorage() *MemoryStorage {\r\n    return &MemoryStorage{\r\n        data: make(map[string]string),\r\n    }\r\n}\r\n\r\nfunc (m *MemoryStorage) Save(key, value string) error {\r\n    m.data[key] = value\r\n    return nil\r\n}\r\n\r\nfunc (m *MemoryStorage) Get(key string) (string, error) {\r\n    value, exists := m.data[key]\r\n    if !exists {\r\n        return \"\", fmt.Errorf(\"key not found: %s\", key)\r\n    }\r\n    return value, nil\r\n}\r\n\r\nfunc (m *MemoryStorage) Delete(key string) error {\r\n    delete(m.data, key)\r\n    return nil\r\n}\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"./storage\"\r\n    \"./memory\"\r\n)\r\n\r\nfunc main() {\r\n    var store storage.Storage = memory.NewMemoryStorage()\r\n    \r\n    store.Save(\"name\", \"Alice\")\r\n    store.Save(\"age\", \"30\")\r\n    \r\n    name, _ := store.Get(\"name\")\r\n    age, _ := store.Get(\"age\")\r\n    \r\n    fmt.Printf(\"Name: %s, Age: %s\\\\n\", name, age)\r\n}`\r\n  }\r\n]; "],"names":["title","code"],"sourceRoot":""}