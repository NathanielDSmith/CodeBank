{"version":3,"file":"static/js/9244.90ff922a.chunk.js","mappings":"kIAAA,MAwPA,EAxPwB,CACtB,CACEA,MAAO,yBACPC,SAAU,CACR,CACED,MAAO,mBACPE,KAAK,wgCAmDP,CACEF,MAAO,kBACPE,KAAK,k0BA6CX,CACEF,MAAO,oBACPC,SAAU,CACR,CACED,MAAO,qBACPE,KAAK,kwDA4EP,CACEF,MAAO,mBACPE,KAAK,mzC","sources":["data/csharp/patterns.ts"],"sourcesContent":["const patternsContent = [\r\n  {\r\n    title: 'Common Design Patterns',\r\n    examples: [\r\n      {\r\n        title: 'Observer pattern',\r\n        code: `// Observer pattern for event handling\r\npublic interface IObserver\r\n{\r\n    void Update(string message);\r\n}\r\n\r\npublic class Subject\r\n{\r\n    private List<IObserver> observers = new List<IObserver>();\r\n    \r\n    public void Attach(IObserver observer)\r\n    {\r\n        observers.Add(observer);\r\n    }\r\n    \r\n    public void Detach(IObserver observer)\r\n    {\r\n        observers.Remove(observer);\r\n    }\r\n    \r\n    public void Notify(string message)\r\n    {\r\n        foreach (var observer in observers)\r\n        {\r\n            observer.Update(message);\r\n        }\r\n    }\r\n}\r\n\r\npublic class Logger : IObserver\r\n{\r\n    public void Update(string message)\r\n    {\r\n        Console.WriteLine($\"[LOG] {message}\");\r\n    }\r\n}\r\n\r\npublic class EmailNotifier : IObserver\r\n{\r\n    public void Update(string message)\r\n    {\r\n        Console.WriteLine($\"[EMAIL] Sending notification: {message}\");\r\n    }\r\n}\r\n\r\n// Usage\r\nvar subject = new Subject();\r\nsubject.Attach(new Logger());\r\nsubject.Attach(new EmailNotifier());\r\nsubject.Notify(\"User logged in\");`\r\n      },\r\n      {\r\n        title: 'Factory pattern',\r\n        code: `// Factory pattern for object creation\r\npublic interface IAnimal\r\n{\r\n    void MakeSound();\r\n}\r\n\r\npublic class Dog : IAnimal\r\n{\r\n    public void MakeSound()\r\n    {\r\n        Console.WriteLine(\"Woof!\");\r\n    }\r\n}\r\n\r\npublic class Cat : IAnimal\r\n{\r\n    public void MakeSound()\r\n    {\r\n        Console.WriteLine(\"Meow!\");\r\n    }\r\n}\r\n\r\npublic class AnimalFactory\r\n{\r\n    public IAnimal CreateAnimal(string animalType)\r\n    {\r\n        return animalType.ToLower() switch\r\n        {\r\n            \"dog\" => new Dog(),\r\n            \"cat\" => new Cat(),\r\n            _ => throw new ArgumentException($\"Unknown animal type: {animalType}\")\r\n        };\r\n    }\r\n}\r\n\r\n// Usage\r\nvar factory = new AnimalFactory();\r\nvar dog = factory.CreateAnimal(\"dog\");\r\nvar cat = factory.CreateAnimal(\"cat\");\r\n\r\ndog.MakeSound(); // Woof!\r\ncat.MakeSound(); // Meow!`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Advanced Patterns',\r\n    examples: [\r\n      {\r\n        title: 'Repository pattern',\r\n        code: `// Repository pattern for data access\r\npublic interface IRepository<T>\r\n{\r\n    Task<T> GetByIdAsync(int id);\r\n    Task<IEnumerable<T>> GetAllAsync();\r\n    Task<T> AddAsync(T entity);\r\n    Task UpdateAsync(T entity);\r\n    Task DeleteAsync(int id);\r\n}\r\n\r\npublic class User\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n    public string Email { get; set; }\r\n}\r\n\r\npublic class UserRepository : IRepository<User>\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n    \r\n    public UserRepository(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n    \r\n    public async Task<User> GetByIdAsync(int id)\r\n    {\r\n        return await _context.Users.FindAsync(id);\r\n    }\r\n    \r\n    public async Task<IEnumerable<User>> GetAllAsync()\r\n    {\r\n        return await _context.Users.ToListAsync();\r\n    }\r\n    \r\n    public async Task<User> AddAsync(User user)\r\n    {\r\n        _context.Users.Add(user);\r\n        await _context.SaveChangesAsync();\r\n        return user;\r\n    }\r\n    \r\n    public async Task UpdateAsync(User user)\r\n    {\r\n        _context.Users.Update(user);\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    \r\n    public async Task DeleteAsync(int id)\r\n    {\r\n        var user = await GetByIdAsync(id);\r\n        if (user != null)\r\n        {\r\n            _context.Users.Remove(user);\r\n            await _context.SaveChangesAsync();\r\n        }\r\n    }\r\n}\r\n\r\n// Usage with dependency injection\r\npublic class UserService\r\n{\r\n    private readonly IRepository<User> _userRepository;\r\n    \r\n    public UserService(IRepository<User> userRepository)\r\n    {\r\n        _userRepository = userRepository;\r\n    }\r\n    \r\n    public async Task<User> GetUserAsync(int id)\r\n    {\r\n        return await _userRepository.GetByIdAsync(id);\r\n    }\r\n}`\r\n      },\r\n      {\r\n        title: 'Strategy pattern',\r\n        code: `// Strategy pattern for different algorithms\r\npublic interface IPaymentStrategy\r\n{\r\n    void ProcessPayment(decimal amount);\r\n}\r\n\r\npublic class CreditCardPayment : IPaymentStrategy\r\n{\r\n    public void ProcessPayment(decimal amount)\r\n    {\r\n        Console.WriteLine(\"Processing credit card payment: $\" + amount);\r\n    }\r\n}\r\n\r\npublic class PayPalPayment : IPaymentStrategy\r\n{\r\n    public void ProcessPayment(decimal amount)\r\n    {\r\n        Console.WriteLine(\"Processing PayPal payment: $\" + amount);\r\n    }\r\n}\r\n\r\npublic class CryptoPayment : IPaymentStrategy\r\n{\r\n    public void ProcessPayment(decimal amount)\r\n    {\r\n        Console.WriteLine(\"Processing crypto payment: $\" + amount);\r\n    }\r\n}\r\n\r\npublic class PaymentProcessor\r\n{\r\n    private IPaymentStrategy _strategy;\r\n    \r\n    public void SetPaymentStrategy(IPaymentStrategy strategy)\r\n    {\r\n        _strategy = strategy;\r\n    }\r\n    \r\n    public void ProcessPayment(decimal amount)\r\n    {\r\n        _strategy?.ProcessPayment(amount);\r\n    }\r\n}\r\n\r\n// Usage\r\nvar processor = new PaymentProcessor();\r\n\r\nprocessor.SetPaymentStrategy(new CreditCardPayment());\r\nprocessor.ProcessPayment(100.00m);\r\n\r\nprocessor.SetPaymentStrategy(new PayPalPayment());\r\nprocessor.ProcessPayment(50.00m);\r\n\r\nprocessor.SetPaymentStrategy(new CryptoPayment());\r\nprocessor.ProcessPayment(25.00m);`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default patternsContent; "],"names":["title","examples","code"],"sourceRoot":""}