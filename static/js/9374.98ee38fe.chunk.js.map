{"version":3,"file":"static/js/9374.98ee38fe.chunk.js","mappings":"kIAAA,MA8HA,EA9HsB,CACpB,CACEA,MAAO,4BACPC,SAAU,CACR,CACED,MAAO,yCACPE,KAAK,wuBA0BP,CACEF,MAAO,oCACPE,KAAK,ooBAwBX,CACEF,MAAO,sBACPC,SAAU,CACR,CACED,MAAO,4BACPE,KAAK,u6BAkCP,CACEF,MAAO,mBACPE,KAAK,qxB","sources":["data/array/basics.ts"],"sourcesContent":["const basicsContent = [\r\n  {\r\n    title: 'Array Creation and Access',\r\n    examples: [\r\n      {\r\n        title: 'Creating arrays and accessing elements',\r\n        code: `// JavaScript: Creating arrays\r\nlet emptyArray = [];\r\nlet numbers = [1, 2, 3, 4, 5];\r\nlet mixed = [1, \"hello\", true, null];\r\n\r\n// Accessing elements\r\nlet fruits = [\"apple\", \"banana\", \"orange\"];\r\nlet firstFruit = fruits[0]; // \"apple\"\r\nlet lastFruit = fruits[fruits.length - 1]; // \"orange\"\r\n\r\n# Python: Creating lists\r\nempty_list = []\r\nnumbers = [1, 2, 3, 4, 5]\r\nmixed = [1, \"hello\", True, None]\r\n\r\n# Accessing elements\r\nfruits = [\"apple\", \"banana\", \"orange\"]\r\nfirst_fruit = fruits[0]  # \"apple\"\r\nlast_fruit = fruits[-1]  # \"orange\"\r\n\r\n// Java: Creating arrays\r\nint[] numbers = {1, 2, 3, 4, 5};\r\nString[] fruits = {\"apple\", \"banana\", \"orange\"};\r\nint firstFruit = fruits[0]; // \"apple\"\r\nint lastFruit = fruits[fruits.length - 1]; // \"orange\"`\r\n      },\r\n      {\r\n        title: 'Array.isArray() and type checking',\r\n        code: `// JavaScript: Checking if something is an array\r\nlet array = [1, 2, 3];\r\nconsole.log(Array.isArray(array)); // true\r\nconsole.log(Array.isArray(\"hello\")); // false\r\n\r\nfunction isEmptyArray(arr) {\r\n  return Array.isArray(arr) && arr.length === 0;\r\n}\r\n\r\n# Python: Checking if something is a list\r\nmy_list = [1, 2, 3]\r\nprint(isinstance(my_list, list))  # True\r\nprint(isinstance(\"hello\", list))  # False\r\n\r\ndef is_empty_list(lst):\r\n    return isinstance(lst, list) and len(lst) == 0\r\n\r\n// Java: Checking array type\r\nint[] array = {1, 2, 3};\r\nboolean isArray = array.getClass().isArray(); // true\r\nboolean isEmpty = array.length == 0; // false`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Basic Array Methods',\r\n    examples: [\r\n      {\r\n        title: 'push, pop, shift, unshift',\r\n        code: `// JavaScript: Adding and removing elements\r\nlet numbers = [1, 2, 3];\r\n\r\n// push() - adds to the end\r\nnumbers.push(4); // [1, 2, 3, 4]\r\nlet lastElement = numbers.pop(); // removes 4\r\n\r\n// unshift() - adds to the beginning\r\nnumbers.unshift(0); // [0, 1, 2, 3]\r\nlet firstElement = numbers.shift(); // removes 0\r\n\r\n# Python: Adding and removing elements\r\nnumbers = [1, 2, 3]\r\n\r\n# append() - adds to the end\r\nnumbers.append(4)  # [1, 2, 3, 4]\r\nlast_element = numbers.pop()  # removes 4\r\n\r\n# insert() - adds to the beginning\r\nnumbers.insert(0, 0)  # [0, 1, 2, 3]\r\nfirst_element = numbers.pop(0)  # removes 0\r\n\r\n// Java: Using ArrayList\r\nArrayList<Integer> numbers = new ArrayList<>();\r\nnumbers.add(1); numbers.add(2); numbers.add(3);\r\n\r\n// Add to end\r\nnumbers.add(4); // [1, 2, 3, 4]\r\nint lastElement = numbers.remove(numbers.size() - 1);\r\n\r\n// Add to beginning\r\nnumbers.add(0, 0); // [0, 1, 2, 3]\r\nint firstElement = numbers.remove(0);`\r\n      },\r\n      {\r\n        title: 'slice and splice',\r\n        code: `// JavaScript: slice() - creates a copy\r\nlet numbers = [1, 2, 3, 4, 5];\r\nlet firstThree = numbers.slice(0, 3); // [1, 2, 3]\r\nlet lastThree = numbers.slice(-3); // [3, 4, 5]\r\n\r\n// splice() - modifies original array\r\nlet fruits = [\"apple\", \"banana\", \"orange\"];\r\nfruits.splice(1, 1); // removes \"banana\"\r\n\r\n# Python: slicing - creates a copy\r\nnumbers = [1, 2, 3, 4, 5]\r\nfirst_three = numbers[0:3]  # [1, 2, 3]\r\nlast_three = numbers[-3:]  # [3, 4, 5]\r\n\r\n# del - modifies original list\r\nfruits = [\"apple\", \"banana\", \"orange\"]\r\ndel fruits[1]  # removes \"banana\"\r\n\r\n// Java: Using subList and remove\r\nArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\r\nList<Integer> firstThree = numbers.subList(0, 3); // [1, 2, 3]\r\nnumbers.remove(1); // removes element at index 1`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default basicsContent; "],"names":["title","examples","code"],"sourceRoot":""}