"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[2588],{2588:(n,e,i)=>{i.r(e),i.d(e,{default:()=>s});const s=[{title:"Variables and Data Types",examples:[{title:"Basic variable declarations",code:'// Simple variables\nint age = 25;\nstring name = "John";\ndouble price = 19.99;\nbool isActive = true;\n\n// Print to console\nConsole.WriteLine("Hello World");\nConsole.WriteLine("Age: " + age);\nConsole.WriteLine("Name: " + name);'},{title:"Constants",code:'// Constants - values that never change\nconst double PI = 3.14159;\nconst string COMPANY_NAME = "My Company";\n\n// Use constants\ndouble radius = 5;\ndouble area = PI * radius * radius;\nConsole.WriteLine("Area: " + area);'}]},{title:"Classes and Objects",examples:[{title:"Simple class",code:'// Define a class\npublic class Person\n{\n    // Properties (variables that belong to the class)\n    public string Name;\n    public int Age;\n    \n    // Constructor - runs when we create a new Person\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    // Method - function that belongs to the class\n    public void SayHello()\n    {\n        Console.WriteLine("Hello, I\'m " + Name);\n    }\n}\n\n// Create and use a Person object\nPerson person = new Person("Alice", 30);\nperson.SayHello();\nConsole.WriteLine(person.Name + " is " + person.Age + " years old");'},{title:"Simple properties",code:'public class Product\n{\n    // Auto-property - C# creates the get/set for you\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    \n    // Constructor\n    public Product(string name, decimal price)\n    {\n        Name = name;\n        Price = price;\n    }\n    \n    // Method to display product info\n    public void DisplayInfo()\n    {\n        Console.WriteLine("Product: " + Name);\n        Console.WriteLine("Price: $" + Price);\n    }\n}\n\n// Usage\nProduct product = new Product("Laptop", 999.99m);\nproduct.DisplayInfo();'}]},{title:"Collections",examples:[{title:"Arrays and Lists",code:'// Array - fixed size\nstring[] colors = { "Red", "Green", "Blue" };\nint[] numbers = new int[3]; // Empty array with 3 spaces\n\n// List - can grow and shrink\nList<string> fruits = new List<string>();\nfruits.Add("Apple");\nfruits.Add("Banana");\nfruits.Add("Orange");\n\n// Loop through a list\nfor (int i = 0; i < fruits.Count; i++)\n{\n    Console.WriteLine("Fruit " + i + ": " + fruits[i]);\n}\n\n// Or use foreach (easier)\nforeach (string fruit in fruits)\n{\n    Console.WriteLine("I like " + fruit);\n}'},{title:"Dictionary",code:'// Dictionary - key-value pairs\nDictionary<string, int> scores = new Dictionary<string, int>();\n\n// Add items\nscores.Add("Alice", 95);\nscores.Add("Bob", 87);\nscores.Add("Charlie", 92);\n\n// Get a value\nint aliceScore = scores["Alice"];\nConsole.WriteLine("Alice\'s score: " + aliceScore);\n\n// Check if key exists\nif (scores.ContainsKey("David"))\n{\n    Console.WriteLine("David\'s score: " + scores["David"]);\n}\nelse\n{\n    Console.WriteLine("David not found");\n}'}]}]}}]);
//# sourceMappingURL=2588.37d827b8.chunk.js.map