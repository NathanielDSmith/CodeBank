{"version":3,"file":"static/js/5935.8f219cec.chunk.js","mappings":"kIAAA,MAmJA,EAnJyB,CACvB,CACEA,MAAO,mBACPC,SAAU,CACR,CACED,MAAO,wBACPE,KAAK,ozBA0BP,CACEF,MAAO,gCACPE,KAAK,q4BAiCX,CACEF,MAAO,iBACPC,SAAU,CACR,CACED,MAAO,4BACPE,KAAK,20BA8BP,CACEF,MAAO,8BACPE,KAAK,4zB","sources":["data/array/filtering.ts"],"sourcesContent":["const filteringContent = [\r\n  {\r\n    title: 'Filtering Arrays',\r\n    examples: [\r\n      {\r\n        title: 'Using filter() method',\r\n        code: `// JavaScript: Basic filtering\r\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n// Filter even numbers\r\nlet evenNumbers = numbers.filter(num => num % 2 === 0); // [2, 4, 6, 8, 10]\r\n\r\n// Filter odd numbers\r\nlet oddNumbers = numbers.filter(num => num % 2 !== 0); // [1, 3, 5, 7, 9]\r\n\r\n# Python: Basic filtering\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# Filter even numbers\r\neven_numbers = [num for num in numbers if num % 2 == 0]  # [2, 4, 6, 8, 10]\r\n\r\n# Filter odd numbers\r\nodd_numbers = [num for num in numbers if num % 2 != 0]  # [1, 3, 5, 7, 9]\r\n\r\n// Java: Using Stream API\r\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n\r\n// Filter even numbers\r\nList<Integer> evenNumbers = numbers.stream()\r\n    .filter(num -> num % 2 == 0)\r\n    .collect(Collectors.toList()); // [2, 4, 6, 8, 10]`\r\n      },\r\n      {\r\n        title: 'Advanced filtering techniques',\r\n        code: `// JavaScript: Filtering objects\r\nlet users = [\r\n  { name: \"Alice\", age: 25, active: true },\r\n  { name: \"Bob\", age: 30, active: false },\r\n  { name: \"Charlie\", age: 35, active: true }\r\n];\r\n\r\nlet activeUsers = users.filter(user => user.active);\r\nlet youngUsers = users.filter(user => user.age < 30);\r\n\r\n# Python: Filtering objects\r\nusers = [\r\n    {\"name\": \"Alice\", \"age\": 25, \"active\": True},\r\n    {\"name\": \"Bob\", \"age\": 30, \"active\": False},\r\n    {\"name\": \"Charlie\", \"age\": 35, \"active\": True}\r\n]\r\n\r\nactive_users = [user for user in users if user[\"active\"]]\r\nyoung_users = [user for user in users if user[\"age\"] < 30]\r\n\r\n// Java: Filtering objects\r\nList<User> users = Arrays.asList(\r\n    new User(\"Alice\", 25, true),\r\n    new User(\"Bob\", 30, false),\r\n    new User(\"Charlie\", 35, true)\r\n);\r\n\r\nList<User> activeUsers = users.stream()\r\n    .filter(User::isActive)\r\n    .collect(Collectors.toList());`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Sorting Arrays',\r\n    examples: [\r\n      {\r\n        title: 'Basic sorting with sort()',\r\n        code: `// JavaScript: Basic sorting\r\nlet numbers = [3, 1, 4, 1, 5, 9, 2, 6];\r\n\r\n// Sort numbers (ascending)\r\nnumbers.sort((a, b) => a - b); // [1, 1, 2, 3, 4, 5, 6, 9]\r\n\r\n// Sort strings\r\nlet fruits = [\"banana\", \"apple\", \"orange\"];\r\nfruits.sort(); // [\"apple\", \"banana\", \"orange\"]\r\n\r\n# Python: Basic sorting\r\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\r\n\r\n# Sort numbers (ascending)\r\nnumbers.sort()  # [1, 1, 2, 3, 4, 5, 6, 9]\r\n\r\n# Sort strings\r\nfruits = [\"banana\", \"apple\", \"orange\"]\r\nfruits.sort()  # [\"apple\", \"banana\", \"orange\"]\r\n\r\n// Java: Basic sorting\r\nList<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6);\r\n\r\n// Sort numbers (ascending)\r\nCollections.sort(numbers); // [1, 1, 2, 3, 4, 5, 6, 9]\r\n\r\n// Sort strings\r\nList<String> fruits = Arrays.asList(\"banana\", \"apple\", \"orange\");\r\nCollections.sort(fruits); // [\"apple\", \"banana\", \"orange\"]`\r\n      },\r\n      {\r\n        title: 'Advanced sorting techniques',\r\n        code: `// JavaScript: Sorting objects\r\nlet users = [\r\n  { name: \"Alice\", age: 25 },\r\n  { name: \"Bob\", age: 30 },\r\n  { name: \"Charlie\", age: 20 }\r\n];\r\n\r\n// Sort by age\r\nusers.sort((a, b) => a.age - b.age);\r\n\r\n// Sort by name\r\nusers.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n# Python: Sorting objects\r\nusers = [\r\n    {\"name\": \"Alice\", \"age\": 25},\r\n    {\"name\": \"Bob\", \"age\": 30},\r\n    {\"name\": \"Charlie\", \"age\": 20}\r\n]\r\n\r\n# Sort by age\r\nusers.sort(key=lambda user: user[\"age\"])\r\n\r\n# Sort by name\r\nusers.sort(key=lambda user: user[\"name\"])\r\n\r\n// Java: Sorting objects\r\nList<User> users = Arrays.asList(\r\n    new User(\"Alice\", 25),\r\n    new User(\"Bob\", 30),\r\n    new User(\"Charlie\", 20)\r\n);\r\n\r\n// Sort by age\r\nusers.sort(Comparator.comparing(User::getAge));\r\n\r\n// Sort by name\r\nusers.sort(Comparator.comparing(User::getName));`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default filteringContent; "],"names":["title","examples","code"],"sourceRoot":""}