{"version":3,"file":"static/js/1152.b8da5549.chunk.js","mappings":"kIAAA,MA6IA,EA7IwB,CACtB,CACEA,MAAO,kBACPC,SAAU,CACR,CACED,MAAO,iBACPE,KAAK,maAuBP,CACEF,MAAO,iCACPE,KAAK,4mBAoCX,CACEF,MAAO,oBACPC,SAAU,CACR,CACED,MAAO,2BACPE,KAAK,+iBA2BP,CACEF,MAAO,mBACPE,KAAK,gyB","sources":["data/go/channels.ts"],"sourcesContent":["const channelsContent = [\r\n  {\r\n    title: 'Channels Basics',\r\n    examples: [\r\n      {\r\n        title: 'Simple channel',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    // Create a channel for strings\r\n    messageChannel := make(chan string)\r\n    \r\n    // Send a message in a goroutine\r\n    go func() {\r\n        messageChannel <- \"Hello from goroutine!\"\r\n    }()\r\n    \r\n    // Receive the message in main\r\n    message := <-messageChannel\r\n    fmt.Println(message)\r\n    \r\n    fmt.Println(\"Main function ends\")\r\n}`\r\n      },\r\n      {\r\n        title: 'Channel with multiple messages',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc sendMessages(ch chan string) {\r\n    messages := []string{\"Hello\", \"World\", \"from\", \"Go\"}\r\n    \r\n    for _, msg := range messages {\r\n        ch <- msg\r\n        time.Sleep(100 * time.Millisecond)\r\n    }\r\n    \r\n    // Close the channel when done\r\n    close(ch)\r\n}\r\n\r\nfunc main() {\r\n    // Create channel\r\n    ch := make(chan string)\r\n    \r\n    // Start sender goroutine\r\n    go sendMessages(ch)\r\n    \r\n    // Receive messages\r\n    for message := range ch {\r\n        fmt.Println(\"Received:\", message)\r\n    }\r\n    \r\n    fmt.Println(\"All messages received!\")\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Buffered Channels',\r\n    examples: [\r\n      {\r\n        title: 'Buffered channel example',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    // Create a buffered channel (can hold 3 messages)\r\n    ch := make(chan string, 3)\r\n    \r\n    // Send messages (won't block until buffer is full)\r\n    ch <- \"First message\"\r\n    ch <- \"Second message\"\r\n    ch <- \"Third message\"\r\n    \r\n    fmt.Println(\"Sent 3 messages to buffered channel\")\r\n    \r\n    // Receive messages\r\n    fmt.Println(\"Receiving messages:\")\r\n    fmt.Println(<-ch)\r\n    fmt.Println(<-ch)\r\n    fmt.Println(<-ch)\r\n    \r\n    fmt.Println(\"All messages received!\")\r\n}`\r\n      },\r\n      {\r\n        title: 'Select statement',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    ch1 := make(chan string)\r\n    ch2 := make(chan string)\r\n    \r\n    // Send to first channel\r\n    go func() {\r\n        time.Sleep(1 * time.Second)\r\n        ch1 <- \"Message from channel 1\"\r\n    }()\r\n    \r\n    // Send to second channel\r\n    go func() {\r\n        time.Sleep(500 * time.Millisecond)\r\n        ch2 <- \"Message from channel 2\"\r\n    }()\r\n    \r\n    // Select waits for whichever channel is ready first\r\n    for i := 0; i < 2; i++ {\r\n        select {\r\n        case msg1 := <-ch1:\r\n            fmt.Println(\"Received from ch1:\", msg1)\r\n        case msg2 := <-ch2:\r\n            fmt.Println(\"Received from ch2:\", msg2)\r\n        case <-time.After(2 * time.Second):\r\n            fmt.Println(\"Timeout!\")\r\n        }\r\n    }\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default channelsContent; "],"names":["title","examples","code"],"sourceRoot":""}