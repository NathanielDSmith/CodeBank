{"version":3,"file":"static/js/9825.321e5b9b.chunk.js","mappings":"kIAAA,MAkMA,EAlMmB,CACjB,CACEA,MAAO,sBACPC,SAAU,CACR,CACED,MAAO,mBACPE,KAAK,m8BAoCP,CACEF,MAAO,oCACPE,KAAK,grCAoDX,CACEF,MAAO,+BACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAK,krCAwCP,CACEF,MAAO,gCACPE,KAAK,osC","sources":["data/csharp/web.ts"],"sourcesContent":["const webContent = [\r\n  {\r\n    title: 'ASP.NET Core Basics',\r\n    examples: [\r\n      {\r\n        title: 'Basic controller',\r\n        code: `[ApiController]\r\n[Route(\"api/[controller]\")]\r\npublic class UsersController : ControllerBase\r\n{\r\n    private readonly IUserService _userService;\r\n    \r\n    public UsersController(IUserService userService)\r\n    {\r\n        _userService = userService;\r\n    }\r\n    \r\n    [HttpGet]\r\n    public async Task<ActionResult<List<User>>> GetUsers()\r\n    {\r\n        var users = await _userService.GetAllAsync();\r\n        return Ok(users);\r\n    }\r\n    \r\n    [HttpGet(\"{id}\")]\r\n    public async Task<ActionResult<User>> GetUser(int id)\r\n    {\r\n        var user = await _userService.GetByIdAsync(id);\r\n        if (user == null)\r\n            return NotFound();\r\n            \r\n        return Ok(user);\r\n    }\r\n    \r\n    [HttpPost]\r\n    public async Task<ActionResult<User>> CreateUser([FromBody] CreateUserRequest request)\r\n    {\r\n        var user = await _userService.CreateAsync(request);\r\n        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);\r\n    }\r\n}`\r\n      },\r\n      {\r\n        title: 'Dependency injection and services',\r\n        code: `// Service interface\r\npublic interface IUserService\r\n{\r\n    Task<List<User>> GetAllAsync();\r\n    Task<User> GetByIdAsync(int id);\r\n    Task<User> CreateAsync(CreateUserRequest request);\r\n}\r\n\r\n// Service implementation\r\npublic class UserService : IUserService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n    \r\n    public UserService(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n    \r\n    public async Task<List<User>> GetAllAsync()\r\n    {\r\n        return await _context.Users.ToListAsync();\r\n    }\r\n    \r\n    public async Task<User> GetByIdAsync(int id)\r\n    {\r\n        return await _context.Users.FindAsync(id);\r\n    }\r\n    \r\n    public async Task<User> CreateAsync(CreateUserRequest request)\r\n    {\r\n        var user = new User\r\n        {\r\n            Name = request.Name,\r\n            Email = request.Email\r\n        };\r\n        \r\n        _context.Users.Add(user);\r\n        await _context.SaveChangesAsync();\r\n        \r\n        return user;\r\n    }\r\n}\r\n\r\n// Register in Startup.cs\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddDbContext<ApplicationDbContext>();\r\n    services.AddScoped<IUserService, UserService>();\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Middleware and Configuration',\r\n    examples: [\r\n      {\r\n        title: 'Custom middleware',\r\n        code: `// Custom middleware\r\npublic class RequestLoggingMiddleware\r\n{\r\n    private readonly RequestDelegate _next;\r\n    private readonly ILogger<RequestLoggingMiddleware> _logger;\r\n    \r\n    public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)\r\n    {\r\n        _next = next;\r\n        _logger = logger;\r\n    }\r\n    \r\n    public async Task InvokeAsync(HttpContext context)\r\n    {\r\n        var startTime = DateTime.UtcNow;\r\n        \r\n        await _next(context);\r\n        \r\n        var duration = DateTime.UtcNow - startTime;\r\n        _logger.LogInformation($\"Request {context.Request.Method} {context.Request.Path} took {duration.TotalMilliseconds}ms\");\r\n    }\r\n}\r\n\r\n// Extension method for easy registration\r\npublic static class RequestLoggingMiddlewareExtensions\r\n{\r\n    public static IApplicationBuilder UseRequestLogging(this IApplicationBuilder builder)\r\n    {\r\n        return builder.UseMiddleware<RequestLoggingMiddleware>();\r\n    }\r\n}\r\n\r\n// Usage in Startup.cs\r\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n{\r\n    app.UseRequestLogging();\r\n    app.UseRouting();\r\n    app.UseEndpoints(endpoints => endpoints.MapControllers());\r\n}`\r\n      },\r\n      {\r\n        title: 'Configuration and appsettings',\r\n        code: `// appsettings.json\r\n{\r\n  \"ConnectionStrings\": {\r\n    \"DefaultConnection\": \"Server=localhost;Database=MyApp;Trusted_Connection=true;\"\r\n  },\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft\": \"Warning\"\r\n    }\r\n  },\r\n  \"AllowedHosts\": \"*\"\r\n}\r\n\r\n// Reading configuration\r\npublic class DatabaseSettings\r\n{\r\n    public string ConnectionString { get; set; }\r\n}\r\n\r\n// In Startup.cs\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    var databaseSettings = Configuration.GetSection(\"DatabaseSettings\").Get<DatabaseSettings>();\r\n    services.Configure<DatabaseSettings>(Configuration.GetSection(\"DatabaseSettings\"));\r\n    \r\n    services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseSqlServer(databaseSettings.ConnectionString));\r\n}\r\n\r\n// In controller\r\npublic class ConfigController : ControllerBase\r\n{\r\n    private readonly DatabaseSettings _settings;\r\n    \r\n    public ConfigController(IOptions<DatabaseSettings> settings)\r\n    {\r\n        _settings = settings.Value;\r\n    }\r\n    \r\n    [HttpGet(\"connection\")]\r\n    public IActionResult GetConnectionInfo()\r\n    {\r\n        return Ok(new { ConnectionString = _settings.ConnectionString });\r\n    }\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default webContent; "],"names":["title","examples","code"],"sourceRoot":""}