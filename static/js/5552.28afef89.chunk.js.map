{"version":3,"file":"static/js/5552.28afef89.chunk.js","mappings":"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","sources":["components/ContentSection.tsx","components/PageLayout.tsx","components/CodeBlock.tsx","components/PageHeader.tsx","data/asyncContent.ts","pages/AsyncProgramming.tsx","components/SidePanel.tsx"],"sourcesContent":["import React from 'react';\r\nimport { ContentSectionProps } from '../types/index';\r\n\r\nconst ContentSection: React.FC<ContentSectionProps> = ({ title, children }) => {\r\n  return (\r\n    <section className=\"bg-black/70 backdrop-blur-sm rounded-lg p-3 sm:p-4 lg:p-6 border border-green-500/30 shadow-lg overflow-hidden\">\r\n      <h3 className=\"text-sm sm:text-lg lg:text-xl font-semibold text-green-400 mb-3 sm:mb-4 font-mono matrix-glow break-words\">{title}</h3>\r\n      <div className=\"overflow-x-auto\">\r\n        {children}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ContentSection; ","import React from 'react';\r\nimport PageHeader from './PageHeader';\r\nimport SidePanel from './SidePanel';\r\nimport ContentSection from './ContentSection';\r\nimport CodeBlock from './CodeBlock';\r\n\r\ninterface Example {\r\n  title: string;\r\n  code: string;\r\n}\r\n\r\ninterface Section {\r\n  title: string;\r\n  examples: Example[];\r\n}\r\n\r\ninterface PageLayoutProps {\r\n  title: string;\r\n  icon: string;\r\n  sections: any[];\r\n  activeSection: string;\r\n  searchTerm: string;\r\n  content: Section[] | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isSidePanelOpen: boolean;\r\n  onSectionChange: (sectionId: string) => void;\r\n  onSearchChange: (term: string) => void;\r\n  onToggleSidePanel: () => void;\r\n  fallbackContent?: {\r\n    description: string;\r\n    topics: Array<{ icon: string; text: string }>;\r\n  };\r\n}\r\n\r\nconst PageLayout: React.FC<PageLayoutProps> = ({\r\n  title,\r\n  icon,\r\n  sections,\r\n  activeSection,\r\n  searchTerm,\r\n  content,\r\n  loading,\r\n  error,\r\n  isSidePanelOpen,\r\n  onSectionChange,\r\n  onSearchChange,\r\n  onToggleSidePanel,\r\n  fallbackContent\r\n}) => {\r\n  const renderContent = () => {\r\n    if (loading) {\r\n      return (\r\n        <div className=\"text-center py-12\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4\"></div>\r\n          <p className=\"text-green-400 font-mono\">INITIALIZING...</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return (\r\n        <div className=\"text-center py-12\">\r\n          <h2 className=\"text-2xl font-bold text-green-400 mb-4 font-mono\">\r\n            {sections.find(s => s.id === activeSection)?.title}\r\n          </h2>\r\n          <p className=\"text-red-400 mb-4 font-mono\">{error}</p>\r\n          <button \r\n            onClick={() => window.location.reload()}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 font-mono transition-colors duration-300\"\r\n          >\r\n            RETRY\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!content) {\r\n      const currentSection = sections.find(s => s.id === activeSection);\r\n      return (\r\n        <div className=\"text-center py-12\">\r\n          <h2 className=\"text-2xl font-bold text-green-400 mb-4 font-mono\">\r\n            {currentSection?.title || title}\r\n          </h2>\r\n          <div className=\"max-w-2xl mx-auto\">\r\n            <p className=\"text-green-300 font-mono mb-6\">\r\n              {fallbackContent?.description || `Welcome to ${title}! This section covers essential concepts.`}\r\n            </p>\r\n            {fallbackContent?.topics && (\r\n              <div className=\"bg-black/50 border border-green-500/30 rounded-lg p-6 text-left\">\r\n                <h3 className=\"text-lg font-bold text-green-400 mb-4 font-mono\">What you'll learn:</h3>\r\n                <ul className=\"space-y-2 text-green-300 font-mono\">\r\n                  {fallbackContent.topics.map((topic, index) => (\r\n                    <li key={index} className=\"flex items-start\">\r\n                      <span className=\"text-green-400 mr-2\">{topic.icon}</span>\r\n                      <span>{topic.text}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n            <p className=\"text-green-400 font-mono mt-6 text-sm\">\r\n              Select a topic from the sidebar to get started!\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <h2 className=\"text-lg sm:text-xl lg:text-2xl font-bold text-green-400 mb-4 font-mono matrix-glow\">\r\n          {sections.find(s => s.id === activeSection)?.title}\r\n        </h2>\r\n        \r\n        {content.map((section, index) => (\r\n          <ContentSection key={index} title={section.title}>\r\n            <div className=\"space-y-4\">\r\n              {section.examples.map((example: Example, exampleIndex: number) => (\r\n                <div key={exampleIndex} className=\"bg-black/50 border border-green-500/30 rounded-lg p-4\">\r\n                  <h4 className=\"font-medium text-green-300 mb-2 font-mono\">{example.title}</h4>\r\n                  <CodeBlock code={example.code} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ContentSection>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-black relative overflow-hidden\">\r\n      {/* Matrix digital rain background */}\r\n      <div className=\"absolute inset-0 opacity-10\">\r\n        <div className=\"matrix-rain\"></div>\r\n      </div>\r\n      \r\n      {/* Scan lines effect */}\r\n      <div className=\"absolute inset-0 opacity-5\">\r\n        <div className=\"scanlines\"></div>\r\n      </div>\r\n      \r\n      {/* Grid overlay */}\r\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-green-900/5 to-green-900/10\"></div>\r\n      \r\n      <PageHeader title={title} icon={icon} />\r\n      \r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8 relative z-10\">\r\n        <div className=\"flex gap-4 sm:gap-8\">\r\n          <SidePanel\r\n            sections={sections}\r\n            activeSection={activeSection}\r\n            searchTerm={searchTerm}\r\n            onSectionChange={onSectionChange}\r\n            onSearchChange={onSearchChange}\r\n            isOpen={isSidePanelOpen}\r\n            onToggle={onToggleSidePanel}\r\n          />\r\n          \r\n          <div className=\"flex-1 min-w-0\">\r\n            {renderContent()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageLayout; ","import React from 'react';\r\nimport { CodeBlockProps } from '../types/index';\r\n\r\nconst CodeBlock: React.FC<CodeBlockProps> = ({ code, language = 'javascript' }) => {\r\n  return (\r\n    <div \r\n      className=\"bg-gray-900 text-green-400 p-3 sm:p-4 rounded-lg overflow-x-auto\"\r\n      role=\"code\"\r\n      aria-label={`${language} code example`}\r\n    >\r\n      <pre className=\"text-xs sm:text-sm font-mono whitespace-pre-wrap break-words m-0\">\r\n        <code className=\"break-all\">{code}</code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock; ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { PageHeaderProps } from '../types/index';\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ title, icon }) => {\r\n  const getIconStyle = (icon: string) => {\r\n    // Special styling for text-based icons with consistent sizing and brighter colors\r\n    if (icon === 'TS' || icon === 'V' || icon === 'CSS' || icon === 'S' || icon === '[]' || icon === '{}') {\r\n      return 'font-mono font-bold text-lg sm:text-xl lg:text-2xl bg-cyan-500/30 px-2 py-1 rounded border border-cyan-400/50 text-cyan-300 min-w-[2.5rem] min-h-[2.5rem] flex items-center justify-center';\r\n    }\r\n    // Default styling for emoji icons to match the size\r\n    return 'text-lg sm:text-2xl lg:text-3xl min-w-[2.5rem] min-h-[2.5rem] flex items-center justify-center';\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-black/80 backdrop-blur-sm border-b border-green-500/30 sticky top-0 z-50\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex justify-between items-center py-3 sm:py-4 lg:py-6\">\r\n          <div className=\"flex items-center\">\r\n            <Link to=\"/\" className=\"text-green-400 hover:text-green-300 mr-1 sm:mr-2 lg:mr-4 font-mono transition-colors duration-300 text-xs sm:text-sm lg:text-base\">\r\n              <span className=\"text-green-300\">$</span> cd /home\r\n            </Link>\r\n            <div className=\"flex items-center\">\r\n              <span className={`text-lg sm:text-2xl lg:text-3xl mr-1 sm:mr-2 lg:mr-3 text-green-400 ${getIconStyle(icon)}`}>{icon}</span>\r\n              <h1 className=\"text-xs sm:text-lg lg:text-3xl font-bold text-green-400 font-mono matrix-glow break-words\">{title}</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PageHeader; ","const asyncSections = [\r\n  { id: 'basics', title: 'Async Basics', icon: '⏱️' },\r\n  { id: 'promises', title: 'Promises', icon: '🤝' },\r\n  { id: 'async-await', title: 'Async/Await', icon: '⚡' },\r\n  { id: 'error-handling', title: 'Error Handling', icon: '⚠️' },\r\n  { id: 'api-calls', title: 'API Calls', icon: '🌐' },\r\n  { id: 'parallel', title: 'Parallel Execution', icon: '🔄' }\r\n];\r\n\r\ninterface AsyncContentSection {\r\n  title: string;\r\n  examples: { title: string; code: string }[];\r\n}\r\n\r\ninterface AsyncContent {\r\n  [key: string]: AsyncContentSection[];\r\n}\r\n\r\nconst asyncContent: AsyncContent = {\r\n  basics: [\r\n    {\r\n      title: 'What is Asynchronous Programming?',\r\n      examples: [\r\n        {\r\n          title: 'Synchronous vs Asynchronous',\r\n          code: `// Synchronous (blocking)\r\nconsole.log(\"1\");\r\nconsole.log(\"2\");\r\nconsole.log(\"3\");\r\n// Output: 1, 2, 3\r\n\r\n// Asynchronous (non-blocking)\r\nconsole.log(\"1\");\r\nsetTimeout(() => console.log(\"2\"), 1000);\r\nconsole.log(\"3\");\r\n// Output: 1, 3, 2 (after 1 second)`\r\n        },\r\n        {\r\n          title: 'Why use async programming?',\r\n          code: `// Without async - blocks the UI\r\nconst result = fetch('https://api.example.com/data');\r\nconsole.log(result); // This blocks until complete\r\n\r\n// With async - doesn't block\r\nfetch('https://api.example.com/data')\r\n  .then(response => response.json())\r\n  .then(data => console.log(data));\r\n// UI remains responsive while waiting`\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  promises: [\r\n    {\r\n      title: 'Creating and using Promises',\r\n      examples: [\r\n        {\r\n          title: 'Basic Promise',\r\n          code: `const myPromise = new Promise((resolve, reject) => {\r\n  // Simulate some async work\r\n  setTimeout(() => {\r\n    const success = Math.random() > 0.5;\r\n    if (success) {\r\n      resolve(\"Operation successful!\");\r\n    } else {\r\n      reject(\"Operation failed!\");\r\n    }\r\n  }, 1000);\r\n});\r\n\r\nmyPromise\r\n  .then(result => console.log(result))\r\n  .catch(error => console.error(error));`\r\n        },\r\n        {\r\n          title: 'Promise with .then()',\r\n          code: `fetch('https://jsonplaceholder.typicode.com/users/1')\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(user => {\r\n    console.log('User:', user.name);\r\n    return user.email;\r\n  })\r\n  .then(email => {\r\n    console.log('Email:', email);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error:', error);\r\n  });`\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  'async-await': [\r\n    {\r\n      title: 'Using async/await (modern way)',\r\n      examples: [\r\n        {\r\n          title: 'Basic async/await',\r\n          code: `async function getUser() {\r\n  try {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\r\n    const user = await response.json();\r\n    console.log('User:', user.name);\r\n    return user;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}\r\n\r\n// Call the async function\r\ngetUser();`\r\n        },\r\n        {\r\n          title: 'Multiple async operations',\r\n          code: `async function getMultipleUsers() {\r\n  try {\r\n    const user1 = await fetch('https://jsonplaceholder.typicode.com/users/1');\r\n    const user2 = await fetch('https://jsonplaceholder.typicode.com/users/2');\r\n    \r\n    const data1 = await user1.json();\r\n    const data2 = await user2.json();\r\n    \r\n    console.log('User 1:', data1.name);\r\n    console.log('User 2:', data2.name);\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}`\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  'error-handling': [\r\n    {\r\n      title: 'Handling errors in async code',\r\n      examples: [\r\n        {\r\n          title: 'Try-catch with async/await',\r\n          code: `async function fetchUser(id) {\r\n  try {\r\n    const response = await fetch(\\`https://jsonplaceholder.typicode.com/users/\\${id}\\`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(\\`HTTP error! status: \\${response.status}\\`);\r\n    }\r\n    \r\n    const user = await response.json();\r\n    return user;\r\n  } catch (error) {\r\n    console.error('Failed to fetch user:', error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Usage\r\nconst user = await fetchUser(1);\r\nif (user) {\r\n  console.log('User found:', user.name);\r\n} else {\r\n  console.log('User not found');\r\n}`\r\n        },\r\n        {\r\n          title: 'Error handling with Promises',\r\n          code: `fetch('https://jsonplaceholder.typicode.com/users/999')\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('User not found');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(user => {\r\n    console.log('User:', user);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error:', error.message);\r\n    // Handle the error gracefully\r\n  })\r\n  .finally(() => {\r\n    console.log('Request completed');\r\n  });`\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  'api-calls': [\r\n    {\r\n      title: 'Making API calls',\r\n      examples: [\r\n        {\r\n          title: 'GET request',\r\n          code: `async function getPosts() {\r\n  try {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n    const posts = await response.json();\r\n    \r\n    posts.slice(0, 3).forEach(post => {\r\n      console.log(\\`\\${post.id}: \\${post.title}\\`);\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch posts:', error);\r\n  }\r\n}\r\n\r\ngetPosts();`\r\n        },\r\n        {\r\n          title: 'POST request',\r\n          code: `async function createPost() {\r\n  try {\r\n    const newPost = {\r\n      title: 'My New Post',\r\n      body: 'This is the content of my post',\r\n      userId: 1\r\n    };\r\n\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost)\r\n    });\r\n\r\n    const createdPost = await response.json();\r\n    console.log('Created post:', createdPost);\r\n  } catch (error) {\r\n    console.error('Failed to create post:', error);\r\n  }\r\n}\r\n\r\ncreatePost();`\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  parallel: [\r\n    {\r\n      title: 'Running operations in parallel',\r\n      examples: [\r\n        {\r\n          title: 'Promise.all() - wait for all',\r\n          code: `async function getMultipleUsers() {\r\n  try {\r\n    const promises = [\r\n      fetch('https://jsonplaceholder.typicode.com/users/1'),\r\n      fetch('https://jsonplaceholder.typicode.com/users/2'),\r\n      fetch('https://jsonplaceholder.typicode.com/users/3')\r\n    ];\r\n\r\n    const responses = await Promise.all(promises);\r\n    const users = await Promise.all(\r\n      responses.map(response => response.json())\r\n    );\r\n\r\n    users.forEach(user => {\r\n      console.log(\\`User: \\${user.name}\\`);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}\r\n\r\ngetMultipleUsers();`\r\n        },\r\n        {\r\n          title: 'Promise.race() - wait for first',\r\n          code: `async function getFastestResponse() {\r\n  try {\r\n    const promises = [\r\n      fetch('https://jsonplaceholder.typicode.com/users/1'),\r\n      fetch('https://jsonplaceholder.typicode.com/users/2'),\r\n      fetch('https://jsonplaceholder.typicode.com/users/3')\r\n    ];\r\n\r\n    const fastestResponse = await Promise.race(promises);\r\n    const user = await fastestResponse.json();\r\n    \r\n    console.log('Fastest response:', user.name);\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}\r\n\r\ngetFastestResponse();`\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n\r\nexport { asyncSections, asyncContent }; ","import React, { useState, useEffect } from 'react';\r\nimport { asyncSections, asyncContent } from '../data/asyncContent';\r\nimport PageLayout from '../components/PageLayout';\r\n\r\nconst AsyncProgramming: React.FC = () => {\r\n  const [activeSection, setActiveSection] = useState<string>('basics');\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [content, setContent] = useState<any[] | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Simulate async loading for consistency\r\n      setTimeout(() => {\r\n        setContent(asyncContent[activeSection] || null);\r\n        setLoading(false);\r\n      }, 100);\r\n    } catch (err) {\r\n      setError('Failed to load content');\r\n      setLoading(false);\r\n    }\r\n  }, [activeSection]);\r\n\r\n  const fallbackContent = {\r\n    description: 'Welcome to Async Programming! This section covers essential asynchronous programming concepts for beginners.',\r\n    topics: [\r\n      { icon: '⏱️', text: 'Understanding synchronous vs asynchronous code' },\r\n      { icon: '🤝', text: 'Working with Promises and .then() chains' },\r\n      { icon: '⚡', text: 'Modern async/await syntax' },\r\n      { icon: '⚠️', text: 'Error handling in async operations' },\r\n      { icon: '🌐', text: 'Making API calls and handling responses' },\r\n      { icon: '🔄', text: 'Running operations in parallel' }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Async Programming\"\r\n      icon=\"⏱️\"\r\n      sections={asyncSections}\r\n      activeSection={activeSection}\r\n      searchTerm={searchTerm}\r\n      content={content}\r\n      loading={loading}\r\n      error={error}\r\n      isSidePanelOpen={isSidePanelOpen}\r\n      onSectionChange={setActiveSection}\r\n      onSearchChange={setSearchTerm}\r\n      onToggleSidePanel={() => setIsSidePanelOpen(!isSidePanelOpen)}\r\n      fallbackContent={fallbackContent}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AsyncProgramming; ","import React from 'react';\r\nimport { SidePanelProps } from '../types/index';\r\n\r\nconst SidePanel: React.FC<SidePanelProps> = ({\r\n  sections,\r\n  activeSection,\r\n  searchTerm,\r\n  onSectionChange,\r\n  onSearchChange,\r\n  isOpen = true,\r\n  onToggle\r\n}) => {\r\n  const filteredSections = sections.filter(section =>\r\n    section.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Mobile Toggle Button */}\r\n      <div className=\"lg:hidden fixed top-28 right-4 z-50\">\r\n        <button\r\n          onClick={onToggle}\r\n          className=\"bg-black/80 backdrop-blur-sm border border-green-500/50 rounded-lg p-3 text-green-400 hover:text-green-300 transition-colors duration-300\"\r\n          aria-label=\"Toggle navigation menu\"\r\n        >\r\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            {isOpen ? (\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            ) : (\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n            )}\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Mobile Overlay */}\r\n      {isOpen && (\r\n        <div \r\n          className=\"lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40\"\r\n          onClick={onToggle}\r\n        />\r\n      )}\r\n\r\n      {/* Side Panel */}\r\n      <div className={`\r\n        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\r\n        lg:w-64 w-80 flex-shrink-0\r\n        fixed lg:relative top-0 left-0 h-full lg:h-auto\r\n        z-50 lg:z-auto\r\n        transition-transform duration-300 ease-in-out\r\n      `}>\r\n        <div className=\"bg-black/90 backdrop-blur-sm border border-green-500/30 p-6 h-full lg:h-auto lg:sticky lg:top-8 overflow-y-auto\">\r\n          <div className=\"lg:hidden flex justify-between items-center mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-green-400 font-mono\">NAVIGATION</h3>\r\n            <button\r\n              onClick={onToggle}\r\n              className=\"text-green-400 hover:text-green-300 transition-colors duration-300\"\r\n              aria-label=\"Close navigation menu\"\r\n            >\r\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          \r\n          <h3 className=\"hidden lg:block text-lg font-semibold text-green-400 mb-4 font-mono\">NAVIGATION</h3>\r\n          \r\n          {/* Search Box */}\r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"search-topics\" className=\"sr-only\">\r\n              Search topics\r\n            </label>\r\n            <input\r\n              id=\"search-topics\"\r\n              type=\"text\"\r\n              placeholder=\"grep -r 'pattern' /*\"\r\n              value={searchTerm}\r\n              onChange={(e) => onSearchChange(e.target.value)}\r\n              className=\"w-full px-3 py-2 bg-black/50 border border-green-500/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500/20 focus:border-green-400 text-green-300 font-mono placeholder-green-500/50\"\r\n              aria-label=\"Search topics in table of contents\"\r\n            />\r\n          </div>\r\n          \r\n          <nav className=\"space-y-2\" aria-label=\"Table of contents\">\r\n            {filteredSections.map((section) => (\r\n              <button\r\n                key={section.id}\r\n                onClick={() => {\r\n                  onSectionChange(section.id);\r\n                  // Close mobile menu after selection\r\n                  if (window.innerWidth < 1024) {\r\n                    onToggle?.();\r\n                  }\r\n                }}\r\n                className={`w-full text-left px-3 py-2 rounded-lg transition-all duration-300 font-mono ${\r\n                  activeSection === section.id\r\n                    ? 'bg-green-500/20 text-green-300 border border-green-400 shadow-lg'\r\n                    : 'text-green-400 hover:bg-green-500/10 hover:text-green-300 border border-transparent hover:border-green-500/50'\r\n                }`}\r\n                aria-current={activeSection === section.id ? 'page' : undefined}\r\n              >\r\n                <span className=\"mr-2\" aria-hidden=\"true\">{section.icon}</span>\r\n                {section.title}\r\n              </button>\r\n            ))}\r\n            \r\n            {filteredSections.length === 0 && (\r\n              <div className=\"text-green-500 text-sm py-2 font-mono\" role=\"status\">\r\n                No topics found matching \"{searchTerm}\"\r\n              </div>\r\n            )}\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidePanel; "],"names":["_ref","title","children","_jsxs","className","_jsx","icon","sections","activeSection","searchTerm","content","loading","error","isSidePanelOpen","onSectionChange","onSearchChange","onToggleSidePanel","fallbackContent","PageHeader","SidePanel","isOpen","onToggle","renderContent","_sections$find2","_sections$find","find","s","id","onClick","window","location","reload","currentSection","description","concat","topics","map","topic","index","text","section","ContentSection","examples","example","exampleIndex","CodeBlock","code","language","role","Link","to","getIconStyle","asyncSections","asyncContent","basics","promises","parallel","AsyncProgramming","setActiveSection","useState","setSearchTerm","setContent","setLoading","setError","setIsSidePanelOpen","useEffect","setTimeout","err","PageLayout","filteredSections","filter","toLowerCase","includes","_Fragment","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","htmlFor","type","placeholder","value","onChange","e","target","innerWidth","undefined","length"],"sourceRoot":""}