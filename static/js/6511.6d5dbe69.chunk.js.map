{"version":3,"file":"static/js/6511.6d5dbe69.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,gCACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAK,siBAiBP,CACEF,MAAO,gBACPE,KAAK,2TAaP,CACEF,MAAO,gBACPE,KAAK,qSAWP,CACEF,MAAO,UACPE,KAAK,qZAiBP,CACEF,MAAO,gBACPE,KAAK,woB","sources":["data/react/testing.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React Testing with Jest & RTL',\r\n    examples: [\r\n      {\r\n        title: 'Component Testing',\r\n        code: `import { render, screen } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport Button from './Button';\r\n\r\ntest('renders button with correct text', () => {\r\n  render(<Button>Click me</Button>);\r\n  expect(screen.getByText('Click me')).toBeInTheDocument();\r\n});\r\n\r\ntest('calls onClick when clicked', () => {\r\n  const handleClick = jest.fn();\r\n  render(<Button onClick={handleClick}>Click me</Button>);\r\n  \r\n  userEvent.click(screen.getByText('Click me'));\r\n  expect(handleClick).toHaveBeenCalledTimes(1);\r\n});`\r\n      },\r\n      {\r\n        title: 'Testing Hooks',\r\n        code: `import { renderHook, act } from '@testing-library/react';\r\nimport { useCounter } from './useCounter';\r\n\r\ntest('useCounter increments value', () => {\r\n  const { result } = renderHook(() => useCounter());\r\n  \r\n  act(() => {\r\n    result.current.increment();\r\n  });\r\n  \r\n  expect(result.current.count).toBe(1);\r\n});`\r\n      },\r\n      {\r\n        title: 'Async Testing',\r\n        code: `import { render, screen, waitFor } from '@testing-library/react';\r\nimport { fetchUser } from './api';\r\n\r\ntest('loads user data', async () => {\r\n  render(<UserProfile userId=\"123\" />);\r\n  \r\n  await waitFor(() => {\r\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n  });\r\n});`\r\n      },\r\n      {\r\n        title: 'Mocking',\r\n        code: `import { render, screen } from '@testing-library/react';\r\nimport { fetchUser } from './api';\r\n\r\n// Mock the API module\r\njest.mock('./api');\r\n\r\ntest('displays user data', async () => {\r\n  fetchUser.mockResolvedValue({\r\n    name: 'John Doe',\r\n    email: 'john@example.com'\r\n  });\r\n  \r\n  render(<UserProfile userId=\"123\" />);\r\n  \r\n  expect(await screen.findByText('John Doe')).toBeInTheDocument();\r\n});`\r\n      },\r\n      {\r\n        title: 'Testing Forms',\r\n        code: `import { render, screen } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport LoginForm from './LoginForm';\r\n\r\ntest('submits form with user input', async () => {\r\n  const handleSubmit = jest.fn();\r\n  render(<LoginForm onSubmit={handleSubmit} />);\r\n  \r\n  await userEvent.type(screen.getByLabelText('Email'), 'test@example.com');\r\n  await userEvent.type(screen.getByLabelText('Password'), 'password123');\r\n  await userEvent.click(screen.getByRole('button', { name: /submit/i }));\r\n  \r\n  expect(handleSubmit).toHaveBeenCalledWith({\r\n    email: 'test@example.com',\r\n    password: 'password123'\r\n  });\r\n});`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}