"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[8906],{8906:(e,n,o)=>{o.r(n),o.d(n,{default:()=>r});const r=[{title:"Working with Object Properties",examples:[{title:"Adding and changing properties",code:'const person = {\n  name: "John",\n  age: 30\n};\n\n// Add a new property\nperson.city = "New York";\nconsole.log(person); // { name: "John", age: 30, city: "New York" }\n\n// Change an existing property\nperson.age = 31;\nconsole.log(person.age); // 31\n\n// Add multiple properties\nperson.email = "john@example.com";\nperson.isActive = true;\n\nconsole.log(person);\n// { name: "John", age: 31, city: "New York", email: "john@example.com", isActive: true }'},{title:"Removing properties",code:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York",\n  email: "john@example.com"\n};\n\n// Remove a property using delete\ndelete person.email;\nconsole.log(person); // { name: "John", age: 30, city: "New York" }\n\n// Remove another property\ndelete person.city;\nconsole.log(person); // { name: "John", age: 30 }\n\n// Check if property exists after deletion\nconsole.log(person.hasOwnProperty("email")); // false\nconsole.log(person.email); // undefined'},{title:"Checking property existence",code:'const person = {\n  name: "John",\n  age: 30,\n  city: undefined  // property exists but value is undefined\n};\n\n// Check if property exists\nconsole.log(person.hasOwnProperty("name")); // true\nconsole.log(person.hasOwnProperty("email")); // false\n\n// Another way to check\nconsole.log("name" in person); // true\nconsole.log("email" in person); // false\n\n// Check if property has a value (not undefined)\nconsole.log(person.name !== undefined); // true\nconsole.log(person.city !== undefined); // true (property exists)\nconsole.log(person.email !== undefined); // false (property doesn\'t exist)\n\n// Safe way to access properties\nconst name = person.name || "Unknown";\nconst email = person.email || "No email";\nconsole.log(name); // "John"\nconsole.log(email); // "No email"'}]},{title:"Property Names and Values",examples:[{title:"Different types of property names",code:'const person = {\n  name: "John",           // normal property name\n  age: 30,               // normal property name\n  "first-name": "John",  // property name with special characters\n  "123": "number key",   // property name that\'s a number (as string)\n  "": "empty key"        // empty string as property name\n};\n\n// Access normal properties with dot notation\nconsole.log(person.name); // "John"\nconsole.log(person.age); // 30\n\n// Access special property names with bracket notation\nconsole.log(person["first-name"]); // "John"\nconsole.log(person["123"]); // "number key"\nconsole.log(person[""]); // "empty key"\n\n// You can also use variables\nconst propertyName = "age";\nconsole.log(person[propertyName]); // 30'},{title:"Property values of different types",code:'const product = {\n  name: "Laptop",                    // string\n  price: 999.99,                    // number\n  inStock: true,                    // boolean\n  colors: ["black", "white"],       // array\n  specs: {                          // object\n    ram: "16GB",\n    storage: "512GB"\n  },\n  getPrice: function() {            // function\n    return this.price;\n  }\n};\n\n// Access different types of values\nconsole.log(product.name); // "Laptop" (string)\nconsole.log(product.price); // 999.99 (number)\nconsole.log(product.inStock); // true (boolean)\nconsole.log(product.colors[0]); // "black" (array element)\nconsole.log(product.specs.ram); // "16GB" (nested object)\nconsole.log(product.getPrice()); // 999.99 (function call)\n\n// Change values\nproduct.price = 899.99;\nproduct.colors.push("silver");\nconsole.log(product.price); // 899.99\nconsole.log(product.colors); // ["black", "white", "silver"]'}]}]}}]);
//# sourceMappingURL=8906.31839110.chunk.js.map