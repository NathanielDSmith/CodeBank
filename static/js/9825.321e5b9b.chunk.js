"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[9825],{9825:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});const s=[{title:"ASP.NET Core Basics",examples:[{title:"Basic controller",code:'[ApiController]\n[Route("api/[controller]")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n    \n    public UsersController(IUserService userService)\n    {\n        _userService = userService;\n    }\n    \n    [HttpGet]\n    public async Task<ActionResult<List<User>>> GetUsers()\n    {\n        var users = await _userService.GetAllAsync();\n        return Ok(users);\n    }\n    \n    [HttpGet("{id}")]\n    public async Task<ActionResult<User>> GetUser(int id)\n    {\n        var user = await _userService.GetByIdAsync(id);\n        if (user == null)\n            return NotFound();\n            \n        return Ok(user);\n    }\n    \n    [HttpPost]\n    public async Task<ActionResult<User>> CreateUser([FromBody] CreateUserRequest request)\n    {\n        var user = await _userService.CreateAsync(request);\n        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);\n    }\n}'},{title:"Dependency injection and services",code:"// Service interface\npublic interface IUserService\n{\n    Task<List<User>> GetAllAsync();\n    Task<User> GetByIdAsync(int id);\n    Task<User> CreateAsync(CreateUserRequest request);\n}\n\n// Service implementation\npublic class UserService : IUserService\n{\n    private readonly ApplicationDbContext _context;\n    \n    public UserService(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n    \n    public async Task<List<User>> GetAllAsync()\n    {\n        return await _context.Users.ToListAsync();\n    }\n    \n    public async Task<User> GetByIdAsync(int id)\n    {\n        return await _context.Users.FindAsync(id);\n    }\n    \n    public async Task<User> CreateAsync(CreateUserRequest request)\n    {\n        var user = new User\n        {\n            Name = request.Name,\n            Email = request.Email\n        };\n        \n        _context.Users.Add(user);\n        await _context.SaveChangesAsync();\n        \n        return user;\n    }\n}\n\n// Register in Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<ApplicationDbContext>();\n    services.AddScoped<IUserService, UserService>();\n}"}]},{title:"Middleware and Configuration",examples:[{title:"Custom middleware",code:'// Custom middleware\npublic class RequestLoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<RequestLoggingMiddleware> _logger;\n    \n    public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n    \n    public async Task InvokeAsync(HttpContext context)\n    {\n        var startTime = DateTime.UtcNow;\n        \n        await _next(context);\n        \n        var duration = DateTime.UtcNow - startTime;\n        _logger.LogInformation($"Request {context.Request.Method} {context.Request.Path} took {duration.TotalMilliseconds}ms");\n    }\n}\n\n// Extension method for easy registration\npublic static class RequestLoggingMiddlewareExtensions\n{\n    public static IApplicationBuilder UseRequestLogging(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<RequestLoggingMiddleware>();\n    }\n}\n\n// Usage in Startup.cs\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRequestLogging();\n    app.UseRouting();\n    app.UseEndpoints(endpoints => endpoints.MapControllers());\n}'},{title:"Configuration and appsettings",code:'// appsettings.json\n{\n  "ConnectionStrings": {\n    "DefaultConnection": "Server=localhost;Database=MyApp;Trusted_Connection=true;"\n  },\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft": "Warning"\n    }\n  },\n  "AllowedHosts": "*"\n}\n\n// Reading configuration\npublic class DatabaseSettings\n{\n    public string ConnectionString { get; set; }\n}\n\n// In Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    var databaseSettings = Configuration.GetSection("DatabaseSettings").Get<DatabaseSettings>();\n    services.Configure<DatabaseSettings>(Configuration.GetSection("DatabaseSettings"));\n    \n    services.AddDbContext<ApplicationDbContext>(options =>\n        options.UseSqlServer(databaseSettings.ConnectionString));\n}\n\n// In controller\npublic class ConfigController : ControllerBase\n{\n    private readonly DatabaseSettings _settings;\n    \n    public ConfigController(IOptions<DatabaseSettings> settings)\n    {\n        _settings = settings.Value;\n    }\n    \n    [HttpGet("connection")]\n    public IActionResult GetConnectionInfo()\n    {\n        return Ok(new { ConnectionString = _settings.ConnectionString });\n    }\n}'}]}]}}]);
//# sourceMappingURL=9825.321e5b9b.chunk.js.map