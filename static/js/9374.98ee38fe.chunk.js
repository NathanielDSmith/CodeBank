"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[9374],{9374:(n,e,r)=>{r.r(e),r.d(e,{default:()=>s});const s=[{title:"Array Creation and Access",examples:[{title:"Creating arrays and accessing elements",code:'// JavaScript: Creating arrays\nlet emptyArray = [];\nlet numbers = [1, 2, 3, 4, 5];\nlet mixed = [1, "hello", true, null];\n\n// Accessing elements\nlet fruits = ["apple", "banana", "orange"];\nlet firstFruit = fruits[0]; // "apple"\nlet lastFruit = fruits[fruits.length - 1]; // "orange"\n\n# Python: Creating lists\nempty_list = []\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, "hello", True, None]\n\n# Accessing elements\nfruits = ["apple", "banana", "orange"]\nfirst_fruit = fruits[0]  # "apple"\nlast_fruit = fruits[-1]  # "orange"\n\n// Java: Creating arrays\nint[] numbers = {1, 2, 3, 4, 5};\nString[] fruits = {"apple", "banana", "orange"};\nint firstFruit = fruits[0]; // "apple"\nint lastFruit = fruits[fruits.length - 1]; // "orange"'},{title:"Array.isArray() and type checking",code:'// JavaScript: Checking if something is an array\nlet array = [1, 2, 3];\nconsole.log(Array.isArray(array)); // true\nconsole.log(Array.isArray("hello")); // false\n\nfunction isEmptyArray(arr) {\n  return Array.isArray(arr) && arr.length === 0;\n}\n\n# Python: Checking if something is a list\nmy_list = [1, 2, 3]\nprint(isinstance(my_list, list))  # True\nprint(isinstance("hello", list))  # False\n\ndef is_empty_list(lst):\n    return isinstance(lst, list) and len(lst) == 0\n\n// Java: Checking array type\nint[] array = {1, 2, 3};\nboolean isArray = array.getClass().isArray(); // true\nboolean isEmpty = array.length == 0; // false'}]},{title:"Basic Array Methods",examples:[{title:"push, pop, shift, unshift",code:"// JavaScript: Adding and removing elements\nlet numbers = [1, 2, 3];\n\n// push() - adds to the end\nnumbers.push(4); // [1, 2, 3, 4]\nlet lastElement = numbers.pop(); // removes 4\n\n// unshift() - adds to the beginning\nnumbers.unshift(0); // [0, 1, 2, 3]\nlet firstElement = numbers.shift(); // removes 0\n\n# Python: Adding and removing elements\nnumbers = [1, 2, 3]\n\n# append() - adds to the end\nnumbers.append(4)  # [1, 2, 3, 4]\nlast_element = numbers.pop()  # removes 4\n\n# insert() - adds to the beginning\nnumbers.insert(0, 0)  # [0, 1, 2, 3]\nfirst_element = numbers.pop(0)  # removes 0\n\n// Java: Using ArrayList\nArrayList<Integer> numbers = new ArrayList<>();\nnumbers.add(1); numbers.add(2); numbers.add(3);\n\n// Add to end\nnumbers.add(4); // [1, 2, 3, 4]\nint lastElement = numbers.remove(numbers.size() - 1);\n\n// Add to beginning\nnumbers.add(0, 0); // [0, 1, 2, 3]\nint firstElement = numbers.remove(0);"},{title:"slice and splice",code:'// JavaScript: slice() - creates a copy\nlet numbers = [1, 2, 3, 4, 5];\nlet firstThree = numbers.slice(0, 3); // [1, 2, 3]\nlet lastThree = numbers.slice(-3); // [3, 4, 5]\n\n// splice() - modifies original array\nlet fruits = ["apple", "banana", "orange"];\nfruits.splice(1, 1); // removes "banana"\n\n# Python: slicing - creates a copy\nnumbers = [1, 2, 3, 4, 5]\nfirst_three = numbers[0:3]  # [1, 2, 3]\nlast_three = numbers[-3:]  # [3, 4, 5]\n\n# del - modifies original list\nfruits = ["apple", "banana", "orange"]\ndel fruits[1]  # removes "banana"\n\n// Java: Using subList and remove\nArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\nList<Integer> firstThree = numbers.subList(0, 3); // [1, 2, 3]\nnumbers.remove(1); // removes element at index 1'}]}]}}]);
//# sourceMappingURL=9374.98ee38fe.chunk.js.map