{"version":3,"file":"static/js/348.e9a039c9.chunk.js","mappings":"gIAAA,SACE,CACEA,MAAO,uBACPC,SAAU,CACR,CACED,MAAO,mBACPE,KAAK,skBAyBP,CACEF,MAAO,gBACPE,KAAK,sjBAkCP,CACEF,MAAO,sBACPE,KAAK,4mBAgCP,CACEF,MAAO,+BACPE,KAAK,6kBA0BP,CACEF,MAAO,mBACPE,KAAK,2jB","sources":["data/react/context.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React Context Basics',\r\n    examples: [\r\n      {\r\n        title: 'Creating Context',\r\n        code: `import { createContext, useContext, useState } from 'react';\r\n\r\n// Create context\r\nconst ThemeContext = createContext();\r\n\r\n// Provider component\r\nfunction ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use context\r\nfunction useTheme() {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within ThemeProvider');\r\n  }\r\n  return context;\r\n}`\r\n      },\r\n      {\r\n        title: 'Using Context',\r\n        code: `import { useTheme } from './ThemeContext';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <Header />\r\n      <Main />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  const { theme, setTheme } = useTheme();\r\n  \r\n  return (\r\n    <header>\r\n      <h1>My App</h1>\r\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n        Switch Theme\r\n      </button>\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  const { theme } = useTheme();\r\n  \r\n  return (\r\n    <main>\r\n      <p>Current theme: {theme}</p>\r\n    </main>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Simple User Context',\r\n        code: `import { createContext, useContext, useState } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nfunction UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  \r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useUser() {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within UserProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Usage\r\nfunction App() {\r\n  return (\r\n    <UserProvider>\r\n      <Header />\r\n      <Main />\r\n    </UserProvider>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Context with Multiple Values',\r\n        code: `import { createContext, useContext, useState } from 'react';\r\n\r\nconst AppContext = createContext();\r\n\r\nfunction AppProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n  const [language, setLanguage] = useState('en');\r\n  \r\n  return (\r\n    <AppContext.Provider value={{ \r\n      theme, setTheme, \r\n      language, setLanguage \r\n    }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useApp() {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error('useApp must be used within AppProvider');\r\n  }\r\n  return context;\r\n}`\r\n      },\r\n      {\r\n        title: 'Context vs Props',\r\n        code: `// Without Context (prop drilling)\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  return (\r\n    <div>\r\n      <Header user={user} setUser={setUser} />\r\n      <Main user={user} />\r\n      <Footer user={user} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// With Context (no prop drilling)\r\nfunction App() {\r\n  return (\r\n    <UserProvider>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </UserProvider>\r\n  );\r\n}\r\n\r\n// Components can access user directly\r\nfunction Header() {\r\n  const { user, setUser } = useUser();\r\n  return <div>Welcome, {user?.name}</div>;\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}