{"version":3,"file":"static/js/348.f7423355.chunk.js","mappings":"gIAAA,SACE,CACEA,MAAO,oBACPC,SAAU,CACR,CACED,MAAO,mBACPE,KAAK,qtBA+BP,CACEF,MAAO,8BACPE,KAAK,0mBAmCP,CACEF,MAAO,oBACPE,KAAK,o0BAsCP,CACEF,MAAO,uBACPE,KAAK,29CA4DP,CACEF,MAAO,mCACPE,KAAK,inC","sources":["data/react/context.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React Context API',\r\n    examples: [\r\n      {\r\n        title: 'Creating Context',\r\n        code: `import { createContext, useContext, useState } from 'react';\r\n\r\n// Create context\r\nconst ThemeContext = createContext();\r\n\r\n// Provider component\r\nfunction ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n  \r\n  const toggleTheme = () => {\r\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use context\r\nfunction useTheme() {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within ThemeProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { ThemeProvider, useTheme };`\r\n      },\r\n      {\r\n        title: 'Using Context in Components',\r\n        code: `import { useTheme } from './ThemeContext';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  const { theme, toggleTheme } = useTheme();\r\n  \r\n  return (\r\n    <header className={theme}>\r\n      <h1>My App</h1>\r\n      <button onClick={toggleTheme}>\r\n        Switch to {theme === 'light' ? 'dark' : 'light'}\r\n      </button>\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  const { theme } = useTheme();\r\n  \r\n  return (\r\n    <main className={theme}>\r\n      <p>Current theme: {theme}</p>\r\n    </main>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Multiple Contexts',\r\n        code: `import { createContext, useContext, useState } from 'react';\r\n\r\n// User context\r\nconst UserContext = createContext();\r\nconst CartContext = createContext();\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  const [cart, setCart] = useState([]);\r\n  \r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      <CartContext.Provider value={{ cart, setCart }}>\r\n        <Header />\r\n        <Main />\r\n      </CartContext.Provider>\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  const { user } = useContext(UserContext);\r\n  const { cart } = useContext(CartContext);\r\n  \r\n  return (\r\n    <header>\r\n      {user ? (\r\n        <div>\r\n          Welcome, {user.name}!\r\n          Cart items: {cart.length}\r\n        </div>\r\n      ) : (\r\n        <button>Login</button>\r\n      )}\r\n    </header>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Context with Reducer',\r\n        code: `import { createContext, useContext, useReducer } from 'react';\r\n\r\n// Action types\r\nconst ACTIONS = {\r\n  ADD_TODO: 'ADD_TODO',\r\n  TOGGLE_TODO: 'TOGGLE_TODO',\r\n  DELETE_TODO: 'DELETE_TODO'\r\n};\r\n\r\n// Reducer function\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_TODO:\r\n      return [...state, { id: Date.now(), text: action.payload, completed: false }];\r\n    case ACTIONS.TOGGLE_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.payload\r\n          ? { ...todo, completed: !todo.completed }\r\n          : todo\r\n      );\r\n    case ACTIONS.DELETE_TODO:\r\n      return state.filter(todo => todo.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\nconst TodoContext = createContext();\r\n\r\nfunction TodoProvider({ children }) {\r\n  const [todos, dispatch] = useReducer(todoReducer, []);\r\n  \r\n  const addTodo = (text) => {\r\n    dispatch({ type: ACTIONS.ADD_TODO, payload: text });\r\n  };\r\n  \r\n  const toggleTodo = (id) => {\r\n    dispatch({ type: ACTIONS.TOGGLE_TODO, payload: id });\r\n  };\r\n  \r\n  const deleteTodo = (id) => {\r\n    dispatch({ type: ACTIONS.DELETE_TODO, payload: id });\r\n  };\r\n  \r\n  return (\r\n    <TodoContext.Provider value={{ todos, addTodo, toggleTodo, deleteTodo }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useTodos() {\r\n  const context = useContext(TodoContext);\r\n  if (!context) {\r\n    throw new Error('useTodos must be used within TodoProvider');\r\n  }\r\n  return context;\r\n}`\r\n      },\r\n      {\r\n        title: 'Context Performance Optimization',\r\n        code: `import { createContext, useContext, useState, useMemo } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nfunction UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [preferences, setPreferences] = useState({});\r\n  \r\n  // Memoize context value to prevent unnecessary re-renders\r\n  const contextValue = useMemo(() => ({\r\n    user,\r\n    setUser,\r\n    preferences,\r\n    setPreferences,\r\n    isLoggedIn: !!user\r\n  }), [user, preferences]);\r\n  \r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\n// Split contexts for better performance\r\nconst UserDataContext = createContext();\r\nconst UserPreferencesContext = createContext();\r\n\r\nfunction SplitUserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [preferences, setPreferences] = useState({});\r\n  \r\n  return (\r\n    <UserDataContext.Provider value={{ user, setUser }}>\r\n      <UserPreferencesContext.Provider value={{ preferences, setPreferences }}>\r\n        {children}\r\n      </UserPreferencesContext.Provider>\r\n    </UserDataContext.Provider>\r\n  );\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}