"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[7492],{7492:(e,n,o)=>{o.r(n),o.d(n,{default:()=>t});const t=[{title:"Object Spread Operator",examples:[{title:"Copying objects with spread",code:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\n// Create a copy of the object\nconst personCopy = { ...person };\nconsole.log(personCopy); // { name: "John", age: 30, city: "New York" }\n\n// The copy is separate from the original\npersonCopy.age = 31;\nconsole.log(person.age); // 30 (original unchanged)\nconsole.log(personCopy.age); // 31 (copy changed)\n\n// This is the same as Object.assign({}, person)'},{title:"Adding properties with spread",code:'const person = {\n  name: "John",\n  age: 30\n};\n\n// Add new properties to a copy\nconst personWithId = { ...person, id: 1 };\nconsole.log(personWithId); // { name: "John", age: 30, id: 1 }\n\n// Add multiple properties\nconst completePerson = { \n  ...person, \n  city: "New York", \n  email: "john@example.com" \n};\nconsole.log(completePerson);\n// { name: "John", age: 30, city: "New York", email: "john@example.com" }'},{title:"Updating properties with spread",code:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\n// Update a property in a copy\nconst updatedPerson = { ...person, age: 31 };\nconsole.log(updatedPerson); // { name: "John", age: 31, city: "New York" }\n\n// Update multiple properties\nconst personWithUpdates = { \n  ...person, \n  age: 31, \n  city: "Los Angeles" \n};\nconsole.log(personWithUpdates);\n// { name: "John", age: 31, city: "Los Angeles" }\n\n// The original object is unchanged\nconsole.log(person.age); // 30 (still the original value)'}]},{title:"Merging Objects",examples:[{title:"Combining multiple objects",code:'const user = {\n  name: "John",\n  email: "john@example.com"\n};\n\nconst profile = {\n  age: 30,\n  city: "New York"\n};\n\nconst settings = {\n  theme: "dark",\n  notifications: true\n};\n\n// Merge all objects into one\nconst completeUser = { ...user, ...profile, ...settings };\nconsole.log(completeUser);\n// {\n//   name: "John",\n//   email: "john@example.com",\n//   age: 30,\n//   city: "New York",\n//   theme: "dark",\n//   notifications: true\n// }\n\n// If properties have the same name, the last one wins\nconst user1 = { name: "John", age: 30 };\nconst user2 = { name: "Jane", city: "Boston" };\n\nconst merged = { ...user1, ...user2 };\nconsole.log(merged); // { name: "Jane", age: 30, city: "Boston" }\n// Note: "Jane" overwrote "John" because user2 came last'},{title:"Creating objects with defaults",code:'// Default settings\nconst defaultSettings = {\n  theme: "light",\n  language: "en",\n  notifications: true\n};\n\n// User preferences (might be incomplete)\nconst userPreferences = {\n  theme: "dark"\n  // Note: missing language and notifications\n};\n\n// Combine defaults with user preferences\nconst finalSettings = { ...defaultSettings, ...userPreferences };\nconsole.log(finalSettings);\n// { theme: "dark", language: "en", notifications: true }\n// User\'s dark theme overwrote the default light theme\n\n// You can also add new properties\nconst settingsWithId = { \n  ...defaultSettings, \n  ...userPreferences, \n  userId: 123 \n};\nconsole.log(settingsWithId);\n// { theme: "dark", language: "en", notifications: true, userId: 123 }'}]}]}}]);
//# sourceMappingURL=7492.e392a0b6.chunk.js.map