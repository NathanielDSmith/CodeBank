"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[348],{348:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o=[{title:"React Context API",examples:[{title:"Creating Context",code:"import { createContext, useContext, useState } from 'react';\n\n// Create context\nconst ThemeContext = createContext();\n\n// Provider component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  \n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n  \n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// Custom hook to use context\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n\nexport { ThemeProvider, useTheme };"},{title:"Using Context in Components",code:"import { useTheme } from './ThemeContext';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Header />\n      <Main />\n      <Footer />\n    </ThemeProvider>\n  );\n}\n\nfunction Header() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <header className={theme}>\n      <h1>My App</h1>\n      <button onClick={toggleTheme}>\n        Switch to {theme === 'light' ? 'dark' : 'light'}\n      </button>\n    </header>\n  );\n}\n\nfunction Main() {\n  const { theme } = useTheme();\n  \n  return (\n    <main className={theme}>\n      <p>Current theme: {theme}</p>\n    </main>\n  );\n}"},{title:"Multiple Contexts",code:"import { createContext, useContext, useState } from 'react';\n\n// User context\nconst UserContext = createContext();\nconst CartContext = createContext();\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [cart, setCart] = useState([]);\n  \n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <CartContext.Provider value={{ cart, setCart }}>\n        <Header />\n        <Main />\n      </CartContext.Provider>\n    </UserContext.Provider>\n  );\n}\n\nfunction Header() {\n  const { user } = useContext(UserContext);\n  const { cart } = useContext(CartContext);\n  \n  return (\n    <header>\n      {user ? (\n        <div>\n          Welcome, {user.name}!\n          Cart items: {cart.length}\n        </div>\n      ) : (\n        <button>Login</button>\n      )}\n    </header>\n  );\n}"},{title:"Context with Reducer",code:"import { createContext, useContext, useReducer } from 'react';\n\n// Action types\nconst ACTIONS = {\n  ADD_TODO: 'ADD_TODO',\n  TOGGLE_TODO: 'TOGGLE_TODO',\n  DELETE_TODO: 'DELETE_TODO'\n};\n\n// Reducer function\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.ADD_TODO:\n      return [...state, { id: Date.now(), text: action.payload, completed: false }];\n    case ACTIONS.TOGGLE_TODO:\n      return state.map(todo =>\n        todo.id === action.payload\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      );\n    case ACTIONS.DELETE_TODO:\n      return state.filter(todo => todo.id !== action.payload);\n    default:\n      return state;\n  }\n}\n\n// Context\nconst TodoContext = createContext();\n\nfunction TodoProvider({ children }) {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  \n  const addTodo = (text) => {\n    dispatch({ type: ACTIONS.ADD_TODO, payload: text });\n  };\n  \n  const toggleTodo = (id) => {\n    dispatch({ type: ACTIONS.TOGGLE_TODO, payload: id });\n  };\n  \n  const deleteTodo = (id) => {\n    dispatch({ type: ACTIONS.DELETE_TODO, payload: id });\n  };\n  \n  return (\n    <TodoContext.Provider value={{ todos, addTodo, toggleTodo, deleteTodo }}>\n      {children}\n    </TodoContext.Provider>\n  );\n}\n\nfunction useTodos() {\n  const context = useContext(TodoContext);\n  if (!context) {\n    throw new Error('useTodos must be used within TodoProvider');\n  }\n  return context;\n}"},{title:"Context Performance Optimization",code:"import { createContext, useContext, useState, useMemo } from 'react';\n\nconst UserContext = createContext();\n\nfunction UserProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [preferences, setPreferences] = useState({});\n  \n  // Memoize context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    user,\n    setUser,\n    preferences,\n    setPreferences,\n    isLoggedIn: !!user\n  }), [user, preferences]);\n  \n  return (\n    <UserContext.Provider value={contextValue}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\n// Split contexts for better performance\nconst UserDataContext = createContext();\nconst UserPreferencesContext = createContext();\n\nfunction SplitUserProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [preferences, setPreferences] = useState({});\n  \n  return (\n    <UserDataContext.Provider value={{ user, setUser }}>\n      <UserPreferencesContext.Provider value={{ preferences, setPreferences }}>\n        {children}\n      </UserPreferencesContext.Provider>\n    </UserDataContext.Provider>\n  );\n}"}]}]}}]);
//# sourceMappingURL=348.f7423355.chunk.js.map