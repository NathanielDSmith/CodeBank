{"version":3,"file":"static/js/5805.af0130b2.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,uBACPC,SAAU,CACR,CACED,MAAO,kBACPE,KAAK,yWAmBP,CACEF,MAAO,yBACPE,KAAK,8ZAmBP,CACEF,MAAO,8BACPE,KAAK,oYAgBP,CACEF,MAAO,2BACPE,KAAK,orBAgCP,CACEF,MAAO,6BACPE,KAAK,wnB","sources":["data/react/effects.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React useEffect Hook',\r\n    examples: [\r\n      {\r\n        title: 'Basic useEffect',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    document.title = \\`Count: \\${count}\\`;\r\n  }, [count]);\r\n  \r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Increment\r\n      </button>\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'useEffect with Cleanup',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction Timer() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(c => c + 1);\r\n    }, 1000);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []); // Empty dependency array = run once\r\n  \r\n  return <div>Timer: {count} seconds</div>;\r\n}`\r\n      },\r\n      {\r\n        title: 'useEffect with Dependencies',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction UserProfile({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetch(\\`/api/users/\\${userId}\\`)\r\n      .then(res => res.json())\r\n      .then(setUser);\r\n  }, [userId]); // Re-run when userId changes\r\n  \r\n  if (!user) return <div>Loading...</div>;\r\n  \r\n  return <div>Hello, {user.name}!</div>;\r\n}`\r\n      },\r\n      {\r\n        title: 'Multiple useEffect Hooks',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n  const [name, setName] = useState('');\r\n  \r\n  // Update document title when count changes\r\n  useEffect(() => {\r\n    document.title = \\`Count: \\${count}\\`;\r\n  }, [count]);\r\n  \r\n  // Log when name changes\r\n  useEffect(() => {\r\n    if (name) {\r\n      console.log('Name changed to:', name);\r\n    }\r\n  }, [name]);\r\n  \r\n  return (\r\n    <div>\r\n      <input\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        placeholder=\"Enter name\"\r\n      />\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Count: {count}\r\n      </button>\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'useEffect for Side Effects',\r\n        code: `import { useEffect } from 'react';\r\n\r\nfunction WindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      Window size: {windowSize.width} x {windowSize.height}\r\n    </div>\r\n  );\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}