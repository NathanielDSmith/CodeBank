{"version":3,"file":"static/js/5202.78043932.chunk.js","mappings":"kIAAA,MAwOA,EAxOqB,CACnB,CACEA,MAAO,eACPC,SAAU,CACR,CACED,MAAO,sBACPE,KAAK,ssCAiDP,CACEF,MAAO,wBACPE,KAAK,yoCAgDX,CACEF,MAAO,yBACPC,SAAU,CACR,CACED,MAAO,iCACPE,KAAK,m8CA6DP,CACEF,MAAO,iCACPE,KAAK,kmC","sources":["data/csharp/unity.ts"],"sourcesContent":["const unityContent = [\r\n  {\r\n    title: 'Unity Basics',\r\n    examples: [\r\n      {\r\n        title: 'Basic MonoBehaviour',\r\n        code: `using UnityEngine;\r\n\r\npublic class PlayerController : MonoBehaviour\r\n{\r\n    [SerializeField] private float moveSpeed = 5f;\r\n    [SerializeField] private float jumpForce = 10f;\r\n    \r\n    private Rigidbody rb;\r\n    private bool isGrounded;\r\n    \r\n    void Start()\r\n    {\r\n        rb = GetComponent<Rigidbody>();\r\n    }\r\n    \r\n    void Update()\r\n    {\r\n        // Handle input\r\n        float horizontalInput = Input.GetAxis(\"Horizontal\");\r\n        float verticalInput = Input.GetAxis(\"Vertical\");\r\n        \r\n        // Move player\r\n        Vector3 movement = new Vector3(horizontalInput, 0f, verticalInput);\r\n        transform.Translate(movement * moveSpeed * Time.deltaTime);\r\n        \r\n        // Jump\r\n        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)\r\n        {\r\n            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);\r\n        }\r\n    }\r\n    \r\n    void OnCollisionEnter(Collision collision)\r\n    {\r\n        if (collision.gameObject.CompareTag(\"Ground\"))\r\n        {\r\n            isGrounded = true;\r\n        }\r\n    }\r\n    \r\n    void OnCollisionExit(Collision collision)\r\n    {\r\n        if (collision.gameObject.CompareTag(\"Ground\"))\r\n        {\r\n            isGrounded = false;\r\n        }\r\n    }\r\n}`\r\n      },\r\n      {\r\n        title: 'Coroutines and timing',\r\n        code: `using UnityEngine;\r\nusing System.Collections;\r\n\r\npublic class GameManager : MonoBehaviour\r\n{\r\n    [SerializeField] private GameObject enemyPrefab;\r\n    [SerializeField] private Transform spawnPoint;\r\n    \r\n    void Start()\r\n    {\r\n        StartCoroutine(SpawnEnemies());\r\n    }\r\n    \r\n    IEnumerator SpawnEnemies()\r\n    {\r\n        while (true)\r\n        {\r\n            SpawnEnemy();\r\n            yield return new WaitForSeconds(2f); // Wait 2 seconds\r\n        }\r\n    }\r\n    \r\n    void SpawnEnemy()\r\n    {\r\n        Instantiate(enemyPrefab, spawnPoint.position, spawnPoint.rotation);\r\n    }\r\n    \r\n    // Coroutine with parameters\r\n    IEnumerator FadeOut(SpriteRenderer sprite, float duration)\r\n    {\r\n        Color startColor = sprite.color;\r\n        Color endColor = new Color(startColor.r, startColor.g, startColor.b, 0f);\r\n        \r\n        float elapsed = 0f;\r\n        while (elapsed < duration)\r\n        {\r\n            elapsed += Time.deltaTime;\r\n            float t = elapsed / duration;\r\n            sprite.color = Color.Lerp(startColor, endColor, t);\r\n            yield return null;\r\n        }\r\n        \r\n        sprite.color = endColor;\r\n    }\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Game Object Management',\r\n    examples: [\r\n      {\r\n        title: 'Object pooling for performance',\r\n        code: `using UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\npublic class ObjectPool : MonoBehaviour\r\n{\r\n    [SerializeField] private GameObject prefab;\r\n    [SerializeField] private int poolSize = 20;\r\n    \r\n    private List<GameObject> pool;\r\n    \r\n    void Start()\r\n    {\r\n        pool = new List<GameObject>();\r\n        \r\n        for (int i = 0; i < poolSize; i++)\r\n        {\r\n            GameObject obj = Instantiate(prefab);\r\n            obj.SetActive(false);\r\n            pool.Add(obj);\r\n        }\r\n    }\r\n    \r\n    public GameObject GetPooledObject()\r\n    {\r\n        for (int i = 0; i < pool.Count; i++)\r\n        {\r\n            if (!pool[i].activeInHierarchy)\r\n            {\r\n                pool[i].SetActive(true);\r\n                return pool[i];\r\n            }\r\n        }\r\n        \r\n        // If no inactive objects, create a new one\r\n        GameObject newObj = Instantiate(prefab);\r\n        pool.Add(newObj);\r\n        return newObj;\r\n    }\r\n    \r\n    public void ReturnToPool(GameObject obj)\r\n    {\r\n        obj.SetActive(false);\r\n    }\r\n}\r\n\r\n// Usage in another script\r\npublic class BulletSpawner : MonoBehaviour\r\n{\r\n    [SerializeField] private ObjectPool bulletPool;\r\n    \r\n    void Update()\r\n    {\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n            GameObject bullet = bulletPool.GetPooledObject();\r\n            bullet.transform.position = transform.position;\r\n            bullet.transform.rotation = transform.rotation;\r\n        }\r\n    }\r\n}`\r\n      },\r\n      {\r\n        title: 'Singleton pattern for managers',\r\n        code: `using UnityEngine;\r\n\r\npublic class GameManager : MonoBehaviour\r\n{\r\n    public static GameManager Instance { get; private set; }\r\n    \r\n    public int Score { get; private set; }\r\n    public bool IsGamePaused { get; private set; }\r\n    \r\n    void Awake()\r\n    {\r\n        // Singleton pattern\r\n        if (Instance == null)\r\n        {\r\n            Instance = this;\r\n            DontDestroyOnLoad(gameObject);\r\n        }\r\n        else\r\n        {\r\n            Destroy(gameObject);\r\n        }\r\n    }\r\n    \r\n    public void AddScore(int points)\r\n    {\r\n        Score += points;\r\n        Debug.Log($\"Score: {Score}\");\r\n    }\r\n    \r\n    public void PauseGame()\r\n    {\r\n        IsGamePaused = true;\r\n        Time.timeScale = 0f;\r\n    }\r\n    \r\n    public void ResumeGame()\r\n    {\r\n        IsGamePaused = false;\r\n        Time.timeScale = 1f;\r\n    }\r\n}\r\n\r\n// Usage in other scripts\r\npublic class Player : MonoBehaviour\r\n{\r\n    void OnTriggerEnter(Collider other)\r\n    {\r\n        if (other.CompareTag(\"Coin\"))\r\n        {\r\n            GameManager.Instance.AddScore(10);\r\n            Destroy(other.gameObject);\r\n        }\r\n    }\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default unityContent; "],"names":["title","examples","code"],"sourceRoot":""}