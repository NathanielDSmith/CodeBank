{"version":3,"file":"static/js/5805.29c1e789.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,uBACPC,SAAU,CACR,CACED,MAAO,kBACPE,KAAK,0uBA4BP,CACEF,MAAO,yBACPE,KAAK,4YAmBP,CACEF,MAAO,2BACPE,KAAK,wrBAgCP,CACEF,MAAO,wBACPE,KAAK,igCAuCP,CACEF,MAAO,6BACPE,KAAK,inC","sources":["data/react/effects.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React useEffect Hook',\r\n    examples: [\r\n      {\r\n        title: 'Basic useEffect',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction UserProfile({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await fetch(\\`/api/users/\\${userId}\\`);\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch user:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchUser();\r\n  }, [userId]); // Dependency array\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  if (!user) return <div>User not found</div>;\r\n  \r\n  return <div>Hello, {user.name}!</div>;\r\n}`\r\n      },\r\n      {\r\n        title: 'Cleanup with useEffect',\r\n        code: `import { useEffect } from 'react';\r\n\r\nfunction Timer() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(c => c + 1);\r\n    }, 1000);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []); // Empty dependency array = run once\r\n  \r\n  return <div>Count: {count}</div>;\r\n}`\r\n      },\r\n      {\r\n        title: 'Multiple useEffect Hooks',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction DataFetcher({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  \r\n  // Fetch user data\r\n  useEffect(() => {\r\n    fetch(\\`/api/users/\\${userId}\\`)\r\n      .then(res => res.json())\r\n      .then(setUser);\r\n  }, [userId]);\r\n  \r\n  // Fetch user posts\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetch(\\`/api/users/\\${userId}/posts\\`)\r\n        .then(res => res.json())\r\n        .then(setPosts);\r\n    }\r\n  }, [user, userId]);\r\n  \r\n  return (\r\n    <div>\r\n      {user && <h1>{user.name}</h1>}\r\n      {posts.map(post => (\r\n        <div key={post.id}>{post.title}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Conditional useEffect',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\nfunction SearchResults({ query }) {\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // Only search if query has at least 3 characters\r\n    if (query.length >= 3) {\r\n      setLoading(true);\r\n      \r\n      const searchTimeout = setTimeout(async () => {\r\n        try {\r\n          const response = await fetch(\\`/api/search?q=\\${query}\\`);\r\n          const data = await response.json();\r\n          setResults(data.results);\r\n        } catch (error) {\r\n          console.error('Search failed:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      }, 500); // Debounce search\r\n      \r\n      return () => clearTimeout(searchTimeout);\r\n    } else {\r\n      setResults([]);\r\n    }\r\n  }, [query]);\r\n  \r\n  return (\r\n    <div>\r\n      {loading && <div>Searching...</div>}\r\n      {results.map(result => (\r\n        <div key={result.id}>{result.title}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Custom Hook with useEffect',\r\n        code: `import { useEffect, useState } from 'react';\r\n\r\n// Custom hook for API calls\r\nfunction useApi(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        \r\n        const result = await response.json();\r\n        setData(result);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [url]);\r\n  \r\n  return { data, loading, error };\r\n}\r\n\r\n// Usage\r\nfunction UserList() {\r\n  const { data: users, loading, error } = useApi('/api/users');\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  \r\n  return (\r\n    <div>\r\n      {users.map(user => (\r\n        <div key={user.id}>{user.name}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}