"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[5988],{5988:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r=[{title:"Basic Struct",code:'package main\n\nimport "fmt"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    person := Person{Name: "Alice", Age: 30}\n    fmt.Printf("Name: %s, Age: %d\\n", person.Name, person.Age)\n}'},{title:"Struct with Methods",code:'package main\n\nimport "fmt"\n\ntype Rectangle struct {\n    Width  float64\n    Height float64\n}\n\n// Method with value receiver\nfunc (r Rectangle) Area() float64 {\n    return r.Width * r.Height\n}\n\n// Method with pointer receiver\nfunc (r *Rectangle) Scale(factor float64) {\n    r.Width *= factor\n    r.Height *= factor\n}\n\nfunc main() {\n    rect := Rectangle{Width: 10, Height: 5}\n    fmt.Printf("Area: %f\\n", rect.Area())\n    \n    rect.Scale(2)\n    fmt.Printf("Scaled Area: %f\\n", rect.Area())\n}'},{title:"Interface Definition",code:'package main\n\nimport "fmt"\n\ntype Shape interface {\n    Area() float64\n    Perimeter() float64\n}\n\ntype Circle struct {\n    Radius float64\n}\n\nfunc (c Circle) Area() float64 {\n    return 3.14159 * c.Radius * c.Radius\n}\n\nfunc (c Circle) Perimeter() float64 {\n    return 2 * 3.14159 * c.Radius\n}\n\ntype Square struct {\n    Side float64\n}\n\nfunc (s Square) Area() float64 {\n    return s.Side * s.Side\n}\n\nfunc (s Square) Perimeter() float64 {\n    return 4 * s.Side\n}\n\nfunc main() {\n    shapes := []Shape{\n        Circle{Radius: 5},\n        Square{Side: 4},\n    }\n    \n    for _, shape := range shapes {\n        fmt.Printf("Area: %f, Perimeter: %f\\n", shape.Area(), shape.Perimeter())\n    }\n}'},{title:"Embedded Structs",code:'package main\n\nimport "fmt"\n\ntype Animal struct {\n    Name string\n    Age  int\n}\n\nfunc (a Animal) Describe() string {\n    return fmt.Sprintf("%s is %d years old", a.Name, a.Age)\n}\n\ntype Dog struct {\n    Animal      // Embedded struct\n    Breed string\n}\n\nfunc (d Dog) Bark() string {\n    return "Woof!"\n}\n\nfunc main() {\n    dog := Dog{\n        Animal: Animal{Name: "Buddy", Age: 3},\n        Breed:  "Golden Retriever",\n    }\n    \n    fmt.Println(dog.Describe()) // Inherited method\n    fmt.Println(dog.Bark())      // Dog\'s own method\n}'},{title:"Interface Composition",code:'package main\n\nimport "fmt"\n\ntype Reader interface {\n    Read() string\n}\n\ntype Writer interface {\n    Write(data string)\n}\n\n// Composed interface\ntype ReadWriter interface {\n    Reader\n    Writer\n}\n\ntype File struct {\n    content string\n}\n\nfunc (f *File) Read() string {\n    return f.content\n}\n\nfunc (f *File) Write(data string) {\n    f.content = data\n}\n\nfunc main() {\n    file := &File{}\n    \n    // File implements ReadWriter\n    var rw ReadWriter = file\n    \n    rw.Write("Hello, Go!")\n    fmt.Println(rw.Read())\n}'}]}}]);
//# sourceMappingURL=5988.220d6aeb.chunk.js.map