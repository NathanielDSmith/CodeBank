"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[348],{348:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r=[{title:"React Context Basics",examples:[{title:"Creating Context",code:"import { createContext, useContext, useState } from 'react';\n\n// Create context\nconst ThemeContext = createContext();\n\n// Provider component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// Custom hook to use context\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}"},{title:"Using Context",code:"import { useTheme } from './ThemeContext';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Header />\n      <Main />\n    </ThemeProvider>\n  );\n}\n\nfunction Header() {\n  const { theme, setTheme } = useTheme();\n  \n  return (\n    <header>\n      <h1>My App</h1>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Switch Theme\n      </button>\n    </header>\n  );\n}\n\nfunction Main() {\n  const { theme } = useTheme();\n  \n  return (\n    <main>\n      <p>Current theme: {theme}</p>\n    </main>\n  );\n}"},{title:"Simple User Context",code:"import { createContext, useContext, useState } from 'react';\n\nconst UserContext = createContext();\n\nfunction UserProvider({ children }) {\n  const [user, setUser] = useState(null);\n  \n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nfunction useUser() {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within UserProvider');\n  }\n  return context;\n}\n\n// Usage\nfunction App() {\n  return (\n    <UserProvider>\n      <Header />\n      <Main />\n    </UserProvider>\n  );\n}"},{title:"Context with Multiple Values",code:"import { createContext, useContext, useState } from 'react';\n\nconst AppContext = createContext();\n\nfunction AppProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  const [language, setLanguage] = useState('en');\n  \n  return (\n    <AppContext.Provider value={{ \n      theme, setTheme, \n      language, setLanguage \n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nfunction useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within AppProvider');\n  }\n  return context;\n}"},{title:"Context vs Props",code:"// Without Context (prop drilling)\nfunction App() {\n  const [user, setUser] = useState(null);\n  return (\n    <div>\n      <Header user={user} setUser={setUser} />\n      <Main user={user} />\n      <Footer user={user} />\n    </div>\n  );\n}\n\n// With Context (no prop drilling)\nfunction App() {\n  return (\n    <UserProvider>\n      <Header />\n      <Main />\n      <Footer />\n    </UserProvider>\n  );\n}\n\n// Components can access user directly\nfunction Header() {\n  const { user, setUser } = useUser();\n  return <div>Welcome, {user?.name}</div>;\n}"}]}]}}]);
//# sourceMappingURL=348.e9a039c9.chunk.js.map