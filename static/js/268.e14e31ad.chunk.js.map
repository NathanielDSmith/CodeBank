{"version":3,"file":"static/js/268.e14e31ad.chunk.js","mappings":"gIACA,MA4HA,EA5HsB,CACpB,CACEA,MAAO,mBACPC,SAAU,CACR,CACED,MAAO,yBACPE,KAAK,uLAUP,CACEF,MAAO,+BACPE,KAAK,qZAgBP,CACEF,MAAO,oCACPE,KAAK,qfAmBX,CACEF,MAAO,8BACPC,SAAU,CACR,CACED,MAAO,6BACPE,KAAK,4WAgBP,CACEF,MAAO,mBACPE,KAAK,whBAkBP,CACEF,MAAO,+BACPE,KAAK,qnB","sources":["data/object/basics.ts"],"sourcesContent":["// JavaScript Object Basics - Beginner-friendly examples\r\nconst basicsContent = [\r\n  {\r\n    title: 'Creating Objects',\r\n    examples: [\r\n      {\r\n        title: 'Simple object creation',\r\n        code: `// JavaScript: Create a simple object\r\nconst person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\nconsole.log(person.name); // \"John\"\r\nconsole.log(person.age); // 30`\r\n      },\r\n      {\r\n        title: 'Adding properties to objects',\r\n        code: `// JavaScript: Start with an empty object\r\nconst user = {};\r\n\r\n// Add properties one by one\r\nuser.name = \"Alice\";\r\nuser.email = \"alice@example.com\";\r\nuser.age = 25;\r\n\r\nconsole.log(user); // { name: \"Alice\", email: \"alice@example.com\", age: 25 }\r\n\r\n// You can also add properties using bracket notation\r\nuser[\"isActive\"] = true;\r\nuser[\"lastLogin\"] = \"2023-12-01\";\r\n\r\nconsole.log(user.isActive); // true`\r\n      },\r\n      {\r\n        title: 'Objects with different data types',\r\n        code: `// JavaScript: Objects can contain different types of data\r\nconst product = {\r\n  name: \"Laptop\",           // string\r\n  price: 999.99,           // number\r\n  inStock: true,           // boolean\r\n  colors: [\"black\", \"white\"], // array\r\n  specs: {                 // nested object\r\n    ram: \"16GB\",\r\n    storage: \"512GB\"\r\n  }\r\n};\r\n\r\nconsole.log(product.name); // \"Laptop\"\r\nconsole.log(product.price); // 999.99\r\nconsole.log(product.colors[0]); // \"black\"\r\nconsole.log(product.specs.ram); // \"16GB\"`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Accessing Object Properties',\r\n    examples: [\r\n      {\r\n        title: 'Dot notation (most common)',\r\n        code: `// JavaScript: Use dot notation to access properties\r\nconst person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Use dot notation to access properties\r\nconsole.log(person.name); // \"John\"\r\nconsole.log(person.age); // 30\r\nconsole.log(person.city); // \"New York\"\r\n\r\n// You can also change values\r\nperson.age = 31;\r\nconsole.log(person.age); // 31`\r\n      },\r\n      {\r\n        title: 'Bracket notation',\r\n        code: `// JavaScript: Use bracket notation for special property names\r\nconst person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  \"favorite-color\": \"blue\"  // property with special characters\r\n};\r\n\r\n// Use bracket notation for properties with special characters\r\nconsole.log(person[\"favorite-color\"]); // \"blue\"\r\n\r\n// You can also use variables\r\nconst propertyName = \"age\";\r\nconsole.log(person[propertyName]); // 30\r\n\r\n// Both ways work for normal properties\r\nconsole.log(person.name); // \"John\"\r\nconsole.log(person[\"name\"]); // \"John\" (same result)`\r\n      },\r\n      {\r\n        title: 'Checking if properties exist',\r\n        code: `// JavaScript: Check if a property exists\r\nconst person = {\r\n  name: \"John\",\r\n  age: 30\r\n};\r\n\r\n// Check if a property exists\r\nconsole.log(person.hasOwnProperty(\"name\")); // true\r\nconsole.log(person.hasOwnProperty(\"city\")); // false\r\n\r\n// Another way to check\r\nconsole.log(\"name\" in person); // true\r\nconsole.log(\"city\" in person); // false\r\n\r\n// Check if property is not undefined\r\nconsole.log(person.name !== undefined); // true\r\nconsole.log(person.city !== undefined); // false\r\n\r\n// Safe way to access properties\r\nconst city = person.city || \"Unknown\";\r\nconsole.log(city); // \"Unknown\" (because person.city is undefined)`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default basicsContent; "],"names":["title","examples","code"],"sourceRoot":""}