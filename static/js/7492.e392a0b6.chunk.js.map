{"version":3,"file":"static/js/7492.e392a0b6.chunk.js","mappings":"kIAAA,MA+IA,EA/IsB,CACpB,CACEA,MAAO,yBACPC,SAAU,CACR,CACED,MAAO,8BACPE,KAAK,sbAiBP,CACEF,MAAO,gCACPE,KAAK,4aAkBP,CACEF,MAAO,kCACPE,KAAK,qhBAwBX,CACEF,MAAO,kBACPC,SAAU,CACR,CACED,MAAO,6BACPE,KAAK,4wBAmCP,CACEF,MAAO,iCACPE,KAAK,6uB","sources":["data/object/spread.ts"],"sourcesContent":["const spreadContent = [\r\n  {\r\n    title: 'Object Spread Operator',\r\n    examples: [\r\n      {\r\n        title: 'Copying objects with spread',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Create a copy of the object\r\nconst personCopy = { ...person };\r\nconsole.log(personCopy); // { name: \"John\", age: 30, city: \"New York\" }\r\n\r\n// The copy is separate from the original\r\npersonCopy.age = 31;\r\nconsole.log(person.age); // 30 (original unchanged)\r\nconsole.log(personCopy.age); // 31 (copy changed)\r\n\r\n// This is the same as Object.assign({}, person)`\r\n      },\r\n      {\r\n        title: 'Adding properties with spread',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30\r\n};\r\n\r\n// Add new properties to a copy\r\nconst personWithId = { ...person, id: 1 };\r\nconsole.log(personWithId); // { name: \"John\", age: 30, id: 1 }\r\n\r\n// Add multiple properties\r\nconst completePerson = { \r\n  ...person, \r\n  city: \"New York\", \r\n  email: \"john@example.com\" \r\n};\r\nconsole.log(completePerson);\r\n// { name: \"John\", age: 30, city: \"New York\", email: \"john@example.com\" }`\r\n      },\r\n      {\r\n        title: 'Updating properties with spread',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Update a property in a copy\r\nconst updatedPerson = { ...person, age: 31 };\r\nconsole.log(updatedPerson); // { name: \"John\", age: 31, city: \"New York\" }\r\n\r\n// Update multiple properties\r\nconst personWithUpdates = { \r\n  ...person, \r\n  age: 31, \r\n  city: \"Los Angeles\" \r\n};\r\nconsole.log(personWithUpdates);\r\n// { name: \"John\", age: 31, city: \"Los Angeles\" }\r\n\r\n// The original object is unchanged\r\nconsole.log(person.age); // 30 (still the original value)`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Merging Objects',\r\n    examples: [\r\n      {\r\n        title: 'Combining multiple objects',\r\n        code: `const user = {\r\n  name: \"John\",\r\n  email: \"john@example.com\"\r\n};\r\n\r\nconst profile = {\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\nconst settings = {\r\n  theme: \"dark\",\r\n  notifications: true\r\n};\r\n\r\n// Merge all objects into one\r\nconst completeUser = { ...user, ...profile, ...settings };\r\nconsole.log(completeUser);\r\n// {\r\n//   name: \"John\",\r\n//   email: \"john@example.com\",\r\n//   age: 30,\r\n//   city: \"New York\",\r\n//   theme: \"dark\",\r\n//   notifications: true\r\n// }\r\n\r\n// If properties have the same name, the last one wins\r\nconst user1 = { name: \"John\", age: 30 };\r\nconst user2 = { name: \"Jane\", city: \"Boston\" };\r\n\r\nconst merged = { ...user1, ...user2 };\r\nconsole.log(merged); // { name: \"Jane\", age: 30, city: \"Boston\" }\r\n// Note: \"Jane\" overwrote \"John\" because user2 came last`\r\n      },\r\n      {\r\n        title: 'Creating objects with defaults',\r\n        code: `// Default settings\r\nconst defaultSettings = {\r\n  theme: \"light\",\r\n  language: \"en\",\r\n  notifications: true\r\n};\r\n\r\n// User preferences (might be incomplete)\r\nconst userPreferences = {\r\n  theme: \"dark\"\r\n  // Note: missing language and notifications\r\n};\r\n\r\n// Combine defaults with user preferences\r\nconst finalSettings = { ...defaultSettings, ...userPreferences };\r\nconsole.log(finalSettings);\r\n// { theme: \"dark\", language: \"en\", notifications: true }\r\n// User's dark theme overwrote the default light theme\r\n\r\n// You can also add new properties\r\nconst settingsWithId = { \r\n  ...defaultSettings, \r\n  ...userPreferences, \r\n  userId: 123 \r\n};\r\nconsole.log(settingsWithId);\r\n// { theme: \"dark\", language: \"en\", notifications: true, userId: 123 }`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default spreadContent; "],"names":["title","examples","code"],"sourceRoot":""}