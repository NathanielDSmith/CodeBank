"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[964],{964:(n,e,o)=>{o.r(e),o.d(e,{default:()=>t});const t=[{title:"Basic Object Destructuring",examples:[{title:"Extracting properties from objects",code:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\n// Extract properties into variables\nconst { name, age, city } = person;\n\nconsole.log(name); // "John"\nconsole.log(age); // 30\nconsole.log(city); // "New York"\n\n// You can also extract only some properties\nconst { name: personName } = person;\nconsole.log(personName); // "John" (only extracted name)'},{title:"Using different variable names",code:'const person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\n// Extract with different variable names\nconst { name: fullName, age: userAge, city: location } = person;\n\nconsole.log(fullName); // "John"\nconsole.log(userAge); // 30\nconsole.log(location); // "New York"\n\n// This is useful when you have naming conflicts\nconst name = "Global Name";\nconst { name: personName } = person;\nconsole.log(name); // "Global Name"\nconsole.log(personName); // "John"'},{title:"Default values with destructuring",code:'const person = {\n  name: "John",\n  age: 30\n  // Note: no city property\n};\n\n// Use default values for missing properties\nconst { name, age, city = "Unknown", country = "USA" } = person;\n\nconsole.log(name); // "John"\nconsole.log(age); // 30\nconsole.log(city); // "Unknown" (default value)\nconsole.log(country); // "USA" (default value)\n\n// You can combine renaming with defaults\nconst { name: fullName, city: location = "Unknown" } = person;\nconsole.log(fullName); // "John"\nconsole.log(location); // "Unknown"'}]},{title:"Destructuring in Functions",examples:[{title:"Function parameters with destructuring",code:'// Function that takes an object as parameter\nfunction printPerson(person) {\n  console.log(person.name + " is " + person.age + " years old");\n}\n\n// Same function using destructuring\nfunction printPersonDestructured({ name, age }) {\n  console.log(name + " is " + age + " years old");\n}\n\nconst person = {\n  name: "John",\n  age: 30,\n  city: "New York"\n};\n\nprintPerson(person); // "John is 30 years old"\nprintPersonDestructured(person); // "John is 30 years old"\n\n// With default values\nfunction greetPerson({ name = "Unknown", age = 0 }) {\n  console.log("Hello, " + name + "! You are " + age + " years old.");\n}\n\ngreetPerson({ name: "Alice", age: 25 }); // "Hello, Alice! You are 25 years old."\ngreetPerson({ name: "Bob" }); // "Hello, Bob! You are 0 years old."\ngreetPerson({}); // "Hello, Unknown! You are 0 years old."'},{title:"Returning objects from functions",code:'// Function that returns an object\nfunction createPerson(name, age) {\n  return {\n    name: name,\n    age: age,\n    greeting: "Hello, I\'m " + name\n  };\n}\n\nconst person = createPerson("John", 30);\n\n// Destructure the returned object\nconst { name, age, greeting } = createPerson("Alice", 25);\n\nconsole.log(name); // "Alice"\nconsole.log(age); // 25\nconsole.log(greeting); // "Hello, I\'m Alice"\n\n// You can also destructure directly in the function call\nconst { name: personName } = createPerson("Bob", 35);\nconsole.log(personName); // "Bob"'}]}]}}]);
//# sourceMappingURL=964.894ca204.chunk.js.map