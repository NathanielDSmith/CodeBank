"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[9719],{9719:(n,t,e)=>{e.r(t),e.d(t,{default:()=>a});const a=[{title:"Variables and Data Types",examples:[{title:"Basic variable declarations",code:'package main\n\nimport "fmt"\n\nfunc main() {\n    // Simple variables\n    var name string = "John"\n    var age int = 25\n    var price float64 = 19.99\n    var isActive bool = true\n    \n    // Short variable declaration (Go\'s way)\n    message := "Hello World"\n    count := 42\n    \n    // Print to console\n    fmt.Println("Hello World")\n    fmt.Println("Name:", name)\n    fmt.Println("Age:", age)\n    fmt.Println("Message:", message)\n}'},{title:"Constants",code:'package main\n\nimport "fmt"\n\nfunc main() {\n    // Constants - values that never change\n    const PI = 3.14159\n    const COMPANY_NAME = "My Company"\n    \n    // Use constants\n    radius := 5.0\n    area := PI * radius * radius\n    fmt.Println("Area:", area)\n    \n    // Multiple constants\n    const (\n        SUNDAY = 0\n        MONDAY = 1\n        TUESDAY = 2\n    )\n    \n    fmt.Println("Monday is day", MONDAY)\n}'}]},{title:"Functions",examples:[{title:"Simple functions",code:'package main\n\nimport "fmt"\n\n// Function that takes parameters and returns a value\nfunc add(a int, b int) int {\n    return a + b\n}\n\n// Function with multiple return values (Go\'s special feature)\nfunc divide(a int, b int) (int, error) {\n    if b == 0 {\n        return 0, fmt.Errorf("cannot divide by zero")\n    }\n    return a / b, nil\n}\n\n// Function with no parameters\nfunc sayHello() {\n    fmt.Println("Hello!")\n}\n\nfunc main() {\n    // Call functions\n    sayHello()\n    \n    result := add(5, 3)\n    fmt.Println("5 + 3 =", result)\n    \n    // Handle multiple return values\n    quotient, err := divide(10, 2)\n    if err != nil {\n        fmt.Println("Error:", err)\n    } else {\n        fmt.Println("10 / 2 =", quotient)\n    }\n}'},{title:"Function with named return values",code:'package main\n\nimport "fmt"\n\n// Named return values - Go\'s way of making code clearer\nfunc getPersonInfo() (name string, age int, city string) {\n    name = "Alice"\n    age = 30\n    city = "New York"\n    return // Go knows what to return\n}\n\nfunc main() {\n    // Call the function\n    name, age, city := getPersonInfo()\n    \n    fmt.Println("Name:", name)\n    fmt.Println("Age:", age)\n    fmt.Println("City:", city)\n}'}]},{title:"Control Flow",examples:[{title:"If statements and loops",code:'package main\n\nimport "fmt"\n\nfunc main() {\n    // If statement\n    age := 18\n    if age >= 18 {\n        fmt.Println("You are an adult")\n    } else {\n        fmt.Println("You are a minor")\n    }\n    \n    // For loop (Go\'s only loop)\n    for i := 0; i < 5; i++ {\n        fmt.Println("Count:", i)\n    }\n    \n    // For loop like a while loop\n    count := 0\n    for count < 3 {\n        fmt.Println("While count:", count)\n        count++\n    }\n    \n    // For loop with range (like foreach)\n    fruits := []string{"Apple", "Banana", "Orange"}\n    for index, fruit := range fruits {\n        fmt.Printf("Fruit %d: %s\n", index, fruit)\n    }\n}'},{title:"Switch statement",code:'package main\n\nimport "fmt"\n\nfunc main() {\n    day := "Monday"\n    \n    // Switch statement\n    switch day {\n    case "Monday":\n        fmt.Println("Start of work week")\n    case "Tuesday", "Wednesday", "Thursday":\n        fmt.Println("Middle of the week")\n    case "Friday":\n        fmt.Println("TGIF!")\n    case "Saturday", "Sunday":\n        fmt.Println("Weekend!")\n    default:\n        fmt.Println("Unknown day")\n    }\n    \n    // Switch with expression\n    age := 25\n    switch {\n    case age < 18:\n        fmt.Println("Minor")\n    case age < 65:\n        fmt.Println("Adult")\n    default:\n        fmt.Println("Senior")\n    }\n}'}]}]}}]);
//# sourceMappingURL=9719.567d5669.chunk.js.map