{"version":3,"file":"static/js/3475.bdaece30.chunk.js","mappings":"kIAAA,MAyHA,EAzH0B,CACxB,CACEA,MAAO,oBACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAK,4iBA4BP,CACEF,MAAO,sBACPE,KAAK,0eA4BX,CACEF,MAAO,sBACPC,SAAU,CACR,CACED,MAAO,sCACPE,KAAK,0cAwBP,CACEF,MAAO,wBACPE,KAAK,sc","sources":["data/go/goroutines.ts"],"sourcesContent":["const goroutinesContent = [\r\n  {\r\n    title: 'Goroutines Basics',\r\n    examples: [\r\n      {\r\n        title: 'Simple goroutines',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\n// Function that will run as a goroutine\r\nfunc sayHello(name string) {\r\n    fmt.Println(\"Hello from\", name)\r\n}\r\n\r\nfunc main() {\r\n    // Start a goroutine (runs in background)\r\n    go sayHello(\"Alice\")\r\n    \r\n    // Start another goroutine\r\n    go sayHello(\"Bob\")\r\n    \r\n    // Main function continues immediately\r\n    fmt.Println(\"Main function continues...\")\r\n    \r\n    // Wait a bit so we can see the goroutines run\r\n    time.Sleep(1 * time.Second)\r\n    \r\n    fmt.Println(\"Main function ends\")\r\n}`\r\n      },\r\n      {\r\n        title: 'Multiple goroutines',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc countNumbers(name string) {\r\n    for i := 1; i <= 5; i++ {\r\n        fmt.Printf(\"%s: %d\\n\", name, i)\r\n        time.Sleep(100 * time.Millisecond)\r\n    }\r\n}\r\n\r\nfunc main() {\r\n    // Start multiple goroutines\r\n    go countNumbers(\"Counter A\")\r\n    go countNumbers(\"Counter B\")\r\n    go countNumbers(\"Counter C\")\r\n    \r\n    // Main function waits\r\n    time.Sleep(1 * time.Second)\r\n    \r\n    fmt.Println(\"All counters finished!\")\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Anonymous Functions',\r\n    examples: [\r\n      {\r\n        title: 'Goroutines with anonymous functions',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    // Start goroutine with anonymous function\r\n    go func() {\r\n        fmt.Println(\"Hello from anonymous function!\")\r\n    }()\r\n    \r\n    // Start goroutine with parameters\r\n    go func(name string) {\r\n        fmt.Println(\"Hello\", name)\r\n    }(\"Alice\")\r\n    \r\n    // Wait for goroutines to finish\r\n    time.Sleep(500 * time.Millisecond)\r\n    \r\n    fmt.Println(\"Main function ends\")\r\n}`\r\n      },\r\n      {\r\n        title: 'Goroutines with loops',\r\n        code: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    // Start 5 goroutines in a loop\r\n    for i := 1; i <= 5; i++ {\r\n        go func(id int) {\r\n            fmt.Printf(\"Worker %d starting\\n\", id)\r\n            time.Sleep(200 * time.Millisecond)\r\n            fmt.Printf(\"Worker %d finished\\n\", id)\r\n        }(i)\r\n    }\r\n    \r\n    // Wait for all workers\r\n    time.Sleep(1 * time.Second)\r\n    fmt.Println(\"All workers finished!\")\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default goroutinesContent; "],"names":["title","examples","code"],"sourceRoot":""}