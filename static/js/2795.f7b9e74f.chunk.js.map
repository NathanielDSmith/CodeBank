{"version":3,"file":"static/js/2795.f7b9e74f.chunk.js","mappings":"kIAAA,MAsCA,EAtCqB,CACnB,CACEA,MAAO,kBACPC,SAAU,CACR,CACED,MAAO,qBACPE,KAAM,4bAER,CACEF,MAAO,iCACPE,KAAM,yXAIZ,CACEF,MAAO,2BACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAM,iQAER,CACEF,MAAO,yBACPE,KAAM,0ZAIZ,CACEF,MAAO,4BACPC,SAAU,CACR,CACED,MAAO,+BACPE,KAAM,6lB","sources":["data/javascript/async.ts"],"sourcesContent":["const asyncContent = [\r\n  {\r\n    title: 'Promises basics',\r\n    examples: [\r\n      {\r\n        title: 'Creating a promise',\r\n        code: '// Create a simple promise\\nconst myPromise = new Promise((resolve, reject) => {\\n  // Simulate some work\\n  setTimeout(() => {\\n    const success = Math.random() > 0.5;\\n    if (success) {\\n      resolve(\"Operation successful!\");\\n    } else {\\n      reject(\"Operation failed!\");\\n    }\\n  }, 1000);\\n});\\n\\n// Use the promise\\nmyPromise\\n  .then(result => console.log(\"Success:\", result))\\n  .catch(error => console.log(\"Error:\", error));'\r\n      },\r\n      {\r\n        title: 'Promise with fetch (API calls)',\r\n        code: '// Fetch data from an API\\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\")\\n  .then(response => {\\n    if (!response.ok) {\\n      throw new Error(\"Network response was not ok\");\\n    }\\n    return response.json();\\n  })\\n  .then(data => {\\n    console.log(\"Data received:\", data);\\n  })\\n  .catch(error => {\\n    console.error(\"Error fetching data:\", error);\\n  });'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Async/await (modern way)',\r\n    examples: [\r\n      {\r\n        title: 'Basic async/await',\r\n        code: '// Convert the promise example to async/await\\nasync function performOperation() {\\n  try {\\n    const result = await myPromise;\\n    console.log(\"Success:\", result);\\n  } catch (error) {\\n    console.log(\"Error:\", error);\\n  }\\n}\\n\\nperformOperation();'\r\n      },\r\n      {\r\n        title: 'Async/await with fetch',\r\n        code: 'async function fetchUserData() {\\n  try {\\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users/1\");\\n    \\n    if (!response.ok) {\\n      throw new Error(\"Failed to fetch user data\");\\n    }\\n    \\n    const user = await response.json();\\n    console.log(\"User:\", user.name);\\n    return user;\\n  } catch (error) {\\n    console.error(\"Error:\", error);\\n  }\\n}\\n\\nfetchUserData();'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Multiple async operations',\r\n    examples: [\r\n      {\r\n        title: 'Running promises in parallel',\r\n        code: 'async function fetchMultipleUsers() {\\n  try {\\n    // Fetch multiple users at the same time\\n    const promises = [\\n      fetch(\"https://jsonplaceholder.typicode.com/users/1\"),\\n      fetch(\"https://jsonplaceholder.typicode.com/users/2\"),\\n      fetch(\"https://jsonplaceholder.typicode.com/users/3\")\\n    ];\\n    \\n    const responses = await Promise.all(promises);\\n    const users = await Promise.all(\\n      responses.map(response => response.json())\\n    );\\n    \\n    console.log(\"All users:\", users);\\n  } catch (error) {\\n    console.error(\"Error:\", error);\\n  }\\n}\\n\\nfetchMultipleUsers();'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default asyncContent; "],"names":["title","examples","code"],"sourceRoot":""}