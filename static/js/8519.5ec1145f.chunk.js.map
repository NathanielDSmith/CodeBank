{"version":3,"file":"static/js/8519.5ec1145f.chunk.js","mappings":"kIAAA,SACE,CACEA,MAAO,kBACPC,SAAU,CACR,CACED,MAAO,iBACPE,KAAK,sjBA0BP,CACEF,MAAO,iBACPE,KAAK,26BAwCP,CACEF,MAAO,eACPE,KAAK,yxCAoDP,CACEF,MAAO,sBACPE,KAAK,07B","sources":["data/react/api.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React API Calls',\r\n    examples: [\r\n      {\r\n        title: 'Basic API Call',\r\n        code: `import { useState, useEffect } from 'react';\r\n\r\nfunction UserList() {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setUsers(data);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  \r\n  return (\r\n    <ul>\r\n      {users.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Error Handling',\r\n        code: `import { useState, useEffect } from 'react';\r\n\r\nfunction PostList() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch posts');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setPosts(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        setError(err.message);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  \r\n  return (\r\n    <div>\r\n      {posts.map(post => (\r\n        <div key={post.id}>\r\n          <h3>{post.title}</h3>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'POST Request',\r\n        code: `import { useState } from 'react';\r\n\r\nfunction CreatePost() {\r\n  const [title, setTitle] = useState('');\r\n  const [body, setBody] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ title, body, userId: 1 })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      console.log('Post created:', data);\r\n      setTitle('');\r\n      setBody('');\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        placeholder=\"Title\"\r\n        required\r\n      />\r\n      <textarea\r\n        value={body}\r\n        onChange={(e) => setBody(e.target.value)}\r\n        placeholder=\"Body\"\r\n        required\r\n      />\r\n      <button type=\"submit\" disabled={loading}>\r\n        {loading ? 'Creating...' : 'Create Post'}\r\n      </button>\r\n    </form>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Custom Hook for API',\r\n        code: `import { useState, useEffect } from 'react';\r\n\r\nfunction useApi(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setData(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        setError(err.message);\r\n        setLoading(false);\r\n      });\r\n  }, [url]);\r\n  \r\n  return { data, loading, error };\r\n}\r\n\r\n// Usage\r\nfunction TodoList() {\r\n  const { data: todos, loading, error } = useApi('https://jsonplaceholder.typicode.com/todos');\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  \r\n  return (\r\n    <ul>\r\n      {todos.map(todo => (\r\n        <li key={todo.id}>\r\n          {todo.title} - {todo.completed ? 'Done' : 'Pending'}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}