{"version":3,"file":"static/js/37.8269ea8b.chunk.js","mappings":"8HAAA,MAmKA,EAnKwB,CACtB,CACEA,MAAO,uBACPC,SAAU,CACR,CACED,MAAO,+BACPE,KAAK,kxBA0BP,CACEF,MAAO,oBACPE,KAAK,07BAuCX,CACEF,MAAO,4BACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAK,s2BAsCP,CACEF,MAAO,sBACPE,KAAK,mjC","sources":["data/csharp/advanced.ts"],"sourcesContent":["const advancedContent = [\r\n  {\r\n    title: 'Advanced C# Features',\r\n    examples: [\r\n      {\r\n        title: 'Records and pattern matching',\r\n        code: `// Records (C# 9.0+)\r\npublic record Person(string Name, int Age);\r\n\r\npublic record Employee(string Name, int Age, string Department) : Person(Name, Age);\r\n\r\n// Pattern matching\r\npublic string GetDisplayName(object obj)\r\n{\r\n    return obj switch\r\n    {\r\n        Person p => $\"Person: {p.Name}\",\r\n        Employee e => $\"Employee: {e.Name} ({e.Department})\",\r\n        string s => $\"String: {s}\",\r\n        int i => $\"Number: {i}\",\r\n        _ => \"Unknown type\"\r\n    };\r\n}\r\n\r\n// Usage\r\nvar person = new Person(\"Alice\", 30);\r\nvar employee = new Employee(\"Bob\", 25, \"Engineering\");\r\n\r\nConsole.WriteLine(GetDisplayName(person));    // Person: Alice\r\nConsole.WriteLine(GetDisplayName(employee));  // Employee: Bob (Engineering)\r\nConsole.WriteLine(GetDisplayName(\"Hello\"));   // String: Hello`\r\n      },\r\n      {\r\n        title: 'Extension methods',\r\n        code: `// Extension methods\r\npublic static class StringExtensions\r\n{\r\n    public static bool IsPalindrome(this string str)\r\n    {\r\n        var clean = str.ToLower().Replace(\" \", \"\");\r\n        return clean == new string(clean.Reverse().ToArray());\r\n    }\r\n    \r\n    public static string ToTitleCase(this string str)\r\n    {\r\n        if (string.IsNullOrEmpty(str))\r\n            return str;\r\n            \r\n        return char.ToUpper(str[0]) + str.Substring(1).ToLower();\r\n    }\r\n}\r\n\r\npublic static class EnumerableExtensions\r\n{\r\n    public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source)\r\n    {\r\n        var random = new Random();\r\n        return source.OrderBy(x => random.Next());\r\n    }\r\n}\r\n\r\n// Usage\r\nstring text = \"racecar\";\r\nConsole.WriteLine(text.IsPalindrome()); // True\r\n\r\nstring name = \"john doe\";\r\nConsole.WriteLine(name.ToTitleCase()); // John doe\r\n\r\nvar numbers = new List<int> { 1, 2, 3, 4, 5 };\r\nvar shuffled = numbers.Shuffle();`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Reflection and Attributes',\r\n    examples: [\r\n      {\r\n        title: 'Custom attributes',\r\n        code: `// Custom attribute\r\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]\r\npublic class AuthorAttribute : Attribute\r\n{\r\n    public string Name { get; }\r\n    public string Version { get; }\r\n    \r\n    public AuthorAttribute(string name, string version = \"1.0\")\r\n    {\r\n        Name = name;\r\n        Version = version;\r\n    }\r\n}\r\n\r\n// Using the attribute\r\n[Author(\"John Doe\", \"2.0\")]\r\npublic class Calculator\r\n{\r\n    [Author(\"Jane Smith\")]\r\n    public int Add(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n}\r\n\r\n// Reading attributes with reflection\r\npublic static void PrintAuthorInfo(Type type)\r\n{\r\n    var authorAttr = type.GetCustomAttribute<AuthorAttribute>();\r\n    if (authorAttr != null)\r\n    {\r\n        Console.WriteLine($\"Author: {authorAttr.Name}, Version: {authorAttr.Version}\");\r\n    }\r\n}\r\n\r\n// Usage\r\nPrintAuthorInfo(typeof(Calculator));`\r\n      },\r\n      {\r\n        title: 'Dynamic programming',\r\n        code: `// Dynamic programming with reflection\r\npublic class DynamicCalculator\r\n{\r\n    public dynamic Add(dynamic a, dynamic b)\r\n    {\r\n        return a + b;\r\n    }\r\n    \r\n    public dynamic Multiply(dynamic a, dynamic b)\r\n    {\r\n        return a * b;\r\n    }\r\n}\r\n\r\n// Using dynamic\r\npublic void ProcessData()\r\n{\r\n    dynamic calculator = new DynamicCalculator();\r\n    \r\n    // Works with different types\r\n    var result1 = calculator.Add(5, 3);        // 8\r\n    var result2 = calculator.Add(\"Hello\", \" World\"); // \"Hello World\"\r\n    var result3 = calculator.Multiply(4, 2.5); // 10.0\r\n    \r\n    Console.WriteLine(result1);\r\n    Console.WriteLine(result2);\r\n    Console.WriteLine(result3);\r\n}\r\n\r\n// ExpandoObject for dynamic properties\r\npublic void CreateDynamicObject()\r\n{\r\n    dynamic person = new ExpandoObject();\r\n    person.Name = \"Alice\";\r\n    person.Age = 30;\r\n    person.SayHello = new Action(() => Console.WriteLine($\"Hello, I'm {person.Name}\"));\r\n    \r\n    person.SayHello(); // Hello, I'm Alice\r\n    Console.WriteLine($\"{person.Name} is {person.Age} years old\");\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default advancedContent; "],"names":["title","examples","code"],"sourceRoot":""}