{"version":3,"file":"static/js/8025.a813878f.chunk.js","mappings":"kIAAA,MA8HA,EA9HuB,CACrB,CACEA,MAAO,uBACPC,SAAU,CACR,CACED,MAAO,yCACPE,KAAK,sWAmBP,CACEF,MAAO,4CACPE,KAAK,yaAiBP,CACEF,MAAO,yCACPE,KAAK,ujBA8BX,CACEF,MAAO,oCACPC,SAAU,CACR,CACED,MAAO,oBACPE,KAAK,uUAcP,CACEF,MAAO,kBACPE,KAAK,upB","sources":["data/object/methods.ts"],"sourcesContent":["const methodsContent = [\r\n  {\r\n    title: 'Basic Object Methods',\r\n    examples: [\r\n      {\r\n        title: 'Object.keys() - get all property names',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Get all property names as an array\r\nconst keys = Object.keys(person);\r\nconsole.log(keys); // [\"name\", \"age\", \"city\"]\r\n\r\n// Loop through all properties\r\nkeys.forEach(key => {\r\n  console.log(key + \": \" + person[key]);\r\n});\r\n// Output:\r\n// name: John\r\n// age: 30\r\n// city: New York`\r\n      },\r\n      {\r\n        title: 'Object.values() - get all property values',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Get all property values as an array\r\nconst values = Object.values(person);\r\nconsole.log(values); // [\"John\", 30, \"New York\"]\r\n\r\n// Check if object has a specific value\r\nconsole.log(values.includes(\"John\")); // true\r\nconsole.log(values.includes(\"London\")); // false\r\n\r\n// Count how many properties the object has\r\nconsole.log(values.length); // 3`\r\n      },\r\n      {\r\n        title: 'Object.entries() - get key-value pairs',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Get all key-value pairs as an array\r\nconst entries = Object.entries(person);\r\nconsole.log(entries);\r\n// [\r\n//   [\"name\", \"John\"],\r\n//   [\"age\", 30],\r\n//   [\"city\", \"New York\"]\r\n// ]\r\n\r\n// Loop through entries\r\nentries.forEach(([key, value]) => {\r\n  console.log(key + \" is \" + value);\r\n});\r\n// Output:\r\n// name is John\r\n// age is 30\r\n// city is New York\r\n\r\n// Find a specific entry\r\nconst nameEntry = entries.find(([key]) => key === \"name\");\r\nconsole.log(nameEntry); // [\"name\", \"John\"]`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Object.assign() - copying objects',\r\n    examples: [\r\n      {\r\n        title: 'Copying an object',\r\n        code: `const original = {\r\n  name: \"John\",\r\n  age: 30\r\n};\r\n\r\n// Create a copy of the object\r\nconst copy = Object.assign({}, original);\r\nconsole.log(copy); // { name: \"John\", age: 30 }\r\n\r\n// The copy is separate from the original\r\ncopy.age = 31;\r\nconsole.log(original.age); // 30 (unchanged)\r\nconsole.log(copy.age); // 31 (changed)`\r\n      },\r\n      {\r\n        title: 'Merging objects',\r\n        code: `const user = {\r\n  name: \"John\",\r\n  email: \"john@example.com\"\r\n};\r\n\r\nconst profile = {\r\n  age: 30,\r\n  city: \"New York\"\r\n};\r\n\r\n// Merge two objects into a new one\r\nconst completeUser = Object.assign({}, user, profile);\r\nconsole.log(completeUser);\r\n// { name: \"John\", email: \"john@example.com\", age: 30, city: \"New York\" }\r\n\r\n// If properties have the same name, the last one wins\r\nconst settings = {\r\n  theme: \"dark\",\r\n  notifications: true\r\n};\r\n\r\nconst userWithSettings = Object.assign({}, user, profile, settings);\r\nconsole.log(userWithSettings);\r\n// { name: \"John\", email: \"john@example.com\", age: 30, city: \"New York\", theme: \"dark\", notifications: true }`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default methodsContent; "],"names":["title","examples","code"],"sourceRoot":""}