"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[6511],{6511:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r=[{title:"React Testing with Jest & RTL",examples:[{title:"Component Testing",code:"import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Button from './Button';\n\ntest('renders button with correct text', () => {\n  render(<Button>Click me</Button>);\n  expect(screen.getByText('Click me')).toBeInTheDocument();\n});\n\ntest('calls onClick when clicked', () => {\n  const handleClick = jest.fn();\n  render(<Button onClick={handleClick}>Click me</Button>);\n  \n  userEvent.click(screen.getByText('Click me'));\n  expect(handleClick).toHaveBeenCalledTimes(1);\n});"},{title:"Testing Hooks",code:"import { renderHook, act } from '@testing-library/react';\nimport { useCounter } from './useCounter';\n\ntest('useCounter increments value', () => {\n  const { result } = renderHook(() => useCounter());\n  \n  act(() => {\n    result.current.increment();\n  });\n  \n  expect(result.current.count).toBe(1);\n});"},{title:"Async Testing",code:"import { render, screen, waitFor } from '@testing-library/react';\nimport { fetchUser } from './api';\n\ntest('loads user data', async () => {\n  render(<UserProfile userId=\"123\" />);\n  \n  await waitFor(() => {\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n  });\n});"},{title:"Mocking",code:"import { render, screen } from '@testing-library/react';\nimport { fetchUser } from './api';\n\n// Mock the API module\njest.mock('./api');\n\ntest('displays user data', async () => {\n  fetchUser.mockResolvedValue({\n    name: 'John Doe',\n    email: 'john@example.com'\n  });\n  \n  render(<UserProfile userId=\"123\" />);\n  \n  expect(await screen.findByText('John Doe')).toBeInTheDocument();\n});"},{title:"Testing Forms",code:"import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from './LoginForm';\n\ntest('submits form with user input', async () => {\n  const handleSubmit = jest.fn();\n  render(<LoginForm onSubmit={handleSubmit} />);\n  \n  await userEvent.type(screen.getByLabelText('Email'), 'test@example.com');\n  await userEvent.type(screen.getByLabelText('Password'), 'password123');\n  await userEvent.click(screen.getByRole('button', { name: /submit/i }));\n  \n  expect(handleSubmit).toHaveBeenCalledWith({\n    email: 'test@example.com',\n    password: 'password123'\n  });\n});"}]}]}}]);
//# sourceMappingURL=6511.6d5dbe69.chunk.js.map