"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[5935],{5935:(e,n,r)=>{r.r(n),r.d(n,{default:()=>s});const s=[{title:"Filtering Arrays",examples:[{title:"Using filter() method",code:"// JavaScript: Basic filtering\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Filter even numbers\nlet evenNumbers = numbers.filter(num => num % 2 === 0); // [2, 4, 6, 8, 10]\n\n// Filter odd numbers\nlet oddNumbers = numbers.filter(num => num % 2 !== 0); // [1, 3, 5, 7, 9]\n\n# Python: Basic filtering\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Filter even numbers\neven_numbers = [num for num in numbers if num % 2 == 0]  # [2, 4, 6, 8, 10]\n\n# Filter odd numbers\nodd_numbers = [num for num in numbers if num % 2 != 0]  # [1, 3, 5, 7, 9]\n\n// Java: Using Stream API\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n// Filter even numbers\nList<Integer> evenNumbers = numbers.stream()\n    .filter(num -> num % 2 == 0)\n    .collect(Collectors.toList()); // [2, 4, 6, 8, 10]"},{title:"Advanced filtering techniques",code:'// JavaScript: Filtering objects\nlet users = [\n  { name: "Alice", age: 25, active: true },\n  { name: "Bob", age: 30, active: false },\n  { name: "Charlie", age: 35, active: true }\n];\n\nlet activeUsers = users.filter(user => user.active);\nlet youngUsers = users.filter(user => user.age < 30);\n\n# Python: Filtering objects\nusers = [\n    {"name": "Alice", "age": 25, "active": True},\n    {"name": "Bob", "age": 30, "active": False},\n    {"name": "Charlie", "age": 35, "active": True}\n]\n\nactive_users = [user for user in users if user["active"]]\nyoung_users = [user for user in users if user["age"] < 30]\n\n// Java: Filtering objects\nList<User> users = Arrays.asList(\n    new User("Alice", 25, true),\n    new User("Bob", 30, false),\n    new User("Charlie", 35, true)\n);\n\nList<User> activeUsers = users.stream()\n    .filter(User::isActive)\n    .collect(Collectors.toList());'}]},{title:"Sorting Arrays",examples:[{title:"Basic sorting with sort()",code:'// JavaScript: Basic sorting\nlet numbers = [3, 1, 4, 1, 5, 9, 2, 6];\n\n// Sort numbers (ascending)\nnumbers.sort((a, b) => a - b); // [1, 1, 2, 3, 4, 5, 6, 9]\n\n// Sort strings\nlet fruits = ["banana", "apple", "orange"];\nfruits.sort(); // ["apple", "banana", "orange"]\n\n# Python: Basic sorting\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\n\n# Sort numbers (ascending)\nnumbers.sort()  # [1, 1, 2, 3, 4, 5, 6, 9]\n\n# Sort strings\nfruits = ["banana", "apple", "orange"]\nfruits.sort()  # ["apple", "banana", "orange"]\n\n// Java: Basic sorting\nList<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6);\n\n// Sort numbers (ascending)\nCollections.sort(numbers); // [1, 1, 2, 3, 4, 5, 6, 9]\n\n// Sort strings\nList<String> fruits = Arrays.asList("banana", "apple", "orange");\nCollections.sort(fruits); // ["apple", "banana", "orange"]'},{title:"Advanced sorting techniques",code:'// JavaScript: Sorting objects\nlet users = [\n  { name: "Alice", age: 25 },\n  { name: "Bob", age: 30 },\n  { name: "Charlie", age: 20 }\n];\n\n// Sort by age\nusers.sort((a, b) => a.age - b.age);\n\n// Sort by name\nusers.sort((a, b) => a.name.localeCompare(b.name));\n\n# Python: Sorting objects\nusers = [\n    {"name": "Alice", "age": 25},\n    {"name": "Bob", "age": 30},\n    {"name": "Charlie", "age": 20}\n]\n\n# Sort by age\nusers.sort(key=lambda user: user["age"])\n\n# Sort by name\nusers.sort(key=lambda user: user["name"])\n\n// Java: Sorting objects\nList<User> users = Arrays.asList(\n    new User("Alice", 25),\n    new User("Bob", 30),\n    new User("Charlie", 20)\n);\n\n// Sort by age\nusers.sort(Comparator.comparing(User::getAge));\n\n// Sort by name\nusers.sort(Comparator.comparing(User::getName));'}]}]}}]);
//# sourceMappingURL=5935.8f219cec.chunk.js.map