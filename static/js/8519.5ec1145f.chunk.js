"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[8519],{8519:(n,e,t)=>{t.r(e),t.d(e,{default:()=>o});const o=[{title:"React API Calls",examples:[{title:"Basic API Call",code:"import { useState, useEffect } from 'react';\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        setUsers(data);\n        setLoading(false);\n      });\n  }, []);\n  \n  if (loading) return <div>Loading...</div>;\n  \n  return (\n    <ul>\n      {users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n}"},{title:"Error Handling",code:"import { useState, useEffect } from 'react';\n\nfunction PostList() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch posts');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setPosts(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError(err.message);\n        setLoading(false);\n      });\n  }, []);\n  \n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  \n  return (\n    <div>\n      {posts.map(post => (\n        <div key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n        </div>\n      ))}\n    </div>\n  );\n}"},{title:"POST Request",code:"import { useState } from 'react';\n\nfunction CreatePost() {\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title, body, userId: 1 })\n      });\n      \n      const data = await response.json();\n      console.log('Post created:', data);\n      setTitle('');\n      setBody('');\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Title\"\n        required\n      />\n      <textarea\n        value={body}\n        onChange={(e) => setBody(e.target.value)}\n        placeholder=\"Body\"\n        required\n      />\n      <button type=\"submit\" disabled={loading}>\n        {loading ? 'Creating...' : 'Create Post'}\n      </button>\n    </form>\n  );\n}"},{title:"Custom Hook for API",code:"import { useState, useEffect } from 'react';\n\nfunction useApi(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError(err.message);\n        setLoading(false);\n      });\n  }, [url]);\n  \n  return { data, loading, error };\n}\n\n// Usage\nfunction TodoList() {\n  const { data: todos, loading, error } = useApi('https://jsonplaceholder.typicode.com/todos');\n  \n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  \n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          {todo.title} - {todo.completed ? 'Done' : 'Pending'}\n        </li>\n      ))}\n    </ul>\n  );\n}"}]}]}}]);
//# sourceMappingURL=8519.5ec1145f.chunk.js.map