{"version":3,"file":"static/js/8929.b0316aae.chunk.js","mappings":"kIAAA,MAgIA,EAhIoB,CAClB,CACEA,MAAO,cACPC,SAAU,CACR,CACED,MAAO,yBACPE,KAAK,0hBAwBP,CACEF,MAAO,uBACPE,KAAK,6pBA0BX,CACEF,MAAO,sBACPC,SAAU,CACR,CACED,MAAO,wBACPE,KAAK,ihBAsBP,CACEF,MAAO,uBACPE,KAAK,u3B","sources":["data/csharp/linq.ts"],"sourcesContent":["const linqContent = [\r\n  {\r\n    title: 'LINQ Basics',\r\n    examples: [\r\n      {\r\n        title: 'Simple LINQ operations',\r\n        code: `// Create a list of numbers\r\nList<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\n\r\n// Find even numbers\r\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\r\nforeach (int num in evenNumbers)\r\n{\r\n    Console.WriteLine(\"Even: \" + num);\r\n}\r\n\r\n// Double each number\r\nvar doubled = numbers.Select(n => n * 2);\r\nforeach (int num in doubled)\r\n{\r\n    Console.WriteLine(\"Doubled: \" + num);\r\n}\r\n\r\n// Sort numbers\r\nvar sorted = numbers.OrderBy(n => n);\r\nforeach (int num in sorted)\r\n{\r\n    Console.WriteLine(\"Sorted: \" + num);\r\n}`\r\n      },\r\n      {\r\n        title: 'Working with strings',\r\n        code: `// List of names\r\nList<string> names = new List<string> { \"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\" };\r\n\r\n// Find names that start with 'A'\r\nvar namesStartingWithA = names.Where(name => name.StartsWith(\"A\"));\r\nforeach (string name in namesStartingWithA)\r\n{\r\n    Console.WriteLine(\"Name starting with A: \" + name);\r\n}\r\n\r\n// Convert names to uppercase\r\nvar upperNames = names.Select(name => name.ToUpper());\r\nforeach (string name in upperNames)\r\n{\r\n    Console.WriteLine(\"Uppercase: \" + name);\r\n}\r\n\r\n// Sort names alphabetically\r\nvar sortedNames = names.OrderBy(name => name);\r\nforeach (string name in sortedNames)\r\n{\r\n    Console.WriteLine(\"Sorted: \" + name);\r\n}`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Simple Aggregations',\r\n    examples: [\r\n      {\r\n        title: 'Basic math operations',\r\n        code: `List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\r\n\r\n// Sum all numbers\r\nint sum = numbers.Sum();\r\nConsole.WriteLine(\"Sum: \" + sum);\r\n\r\n// Find the biggest number\r\nint max = numbers.Max();\r\nConsole.WriteLine(\"Max: \" + max);\r\n\r\n// Find the smallest number\r\nint min = numbers.Min();\r\nConsole.WriteLine(\"Min: \" + min);\r\n\r\n// Count how many numbers\r\nint count = numbers.Count();\r\nConsole.WriteLine(\"Count: \" + count);\r\n\r\n// Average of all numbers\r\ndouble average = numbers.Average();\r\nConsole.WriteLine(\"Average: \" + average);`\r\n      },\r\n      {\r\n        title: 'Working with objects',\r\n        code: `// Simple class\r\npublic class Person\r\n{\r\n    public string Name { get; set; }\r\n    public int Age { get; set; }\r\n}\r\n\r\n// List of people\r\nList<Person> people = new List<Person>\r\n{\r\n    new Person { Name = \"Alice\", Age = 25 },\r\n    new Person { Name = \"Bob\", Age = 30 },\r\n    new Person { Name = \"Charlie\", Age = 35 },\r\n    new Person { Name = \"Diana\", Age = 28 }\r\n};\r\n\r\n// Find people older than 30\r\nvar olderPeople = people.Where(p => p.Age > 30);\r\nforeach (Person person in olderPeople)\r\n{\r\n    Console.WriteLine(person.Name + \" is \" + person.Age + \" years old\");\r\n}\r\n\r\n// Get just the names\r\nvar names = people.Select(p => p.Name);\r\nforeach (string name in names)\r\n{\r\n    Console.WriteLine(\"Name: \" + name);\r\n}\r\n\r\n// Sort by age\r\nvar sortedByAge = people.OrderBy(p => p.Age);\r\nforeach (Person person in sortedByAge)\r\n{\r\n    Console.WriteLine(person.Name + \" - \" + person.Age);\r\n}`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default linqContent; "],"names":["title","examples","code"],"sourceRoot":""}