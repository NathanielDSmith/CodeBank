{"version":3,"file":"static/js/845.849b36e3.chunk.js","mappings":"gIAAA,SACE,CACEA,MAAO,iCACPC,SAAU,CACR,CACED,MAAO,uCACPE,KAAK,mSAeP,CACEF,MAAO,qCACPE,KAAK,oYAkBP,CACEF,MAAO,uCACPE,KAAK,6aAmBP,CACEF,MAAO,iCACPE,KAAK,0WAiBP,CACEF,MAAO,oCACPE,KAAK,+V","sources":["data/react/performance.ts"],"sourcesContent":["export default [\r\n  {\r\n    title: 'React Performance Optimization',\r\n    examples: [\r\n      {\r\n        title: 'React.memo for Component Memoization',\r\n        code: `import React from 'react';\r\n\r\nconst ExpensiveComponent = React.memo(({ data }) => {\r\n  return (\r\n    <div>\r\n      {data.map(item => (\r\n        <div key={item.id}>{item.name}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\n// Only re-renders if props change\r\nexport default ExpensiveComponent;`\r\n      },\r\n      {\r\n        title: 'useMemo for Expensive Calculations',\r\n        code: `import { useMemo } from 'react';\r\n\r\nfunction UserList({ users, filter }) {\r\n  const filteredUsers = useMemo(() => {\r\n    return users.filter(user => \r\n      user.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }, [users, filter]);\r\n  \r\n  return (\r\n    <div>\r\n      {filteredUsers.map(user => (\r\n        <div key={user.id}>{user.name}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'useCallback for Function Memoization',\r\n        code: `import { useCallback } from 'react';\r\n\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  const handleClick = useCallback(() => {\r\n    console.log('Button clicked');\r\n  }, []); // Empty dependency array\r\n  \r\n  return (\r\n    <div>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Count: {count}\r\n      </button>\r\n      <ChildComponent onButtonClick={handleClick} />\r\n    </div>\r\n  );\r\n}`\r\n      },\r\n      {\r\n        title: 'Code Splitting with React.lazy',\r\n        code: `import { lazy, Suspense } from 'react';\r\n\r\nconst LazyComponent = lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\n// LazyComponent.js\r\nexport default function LazyComponent() {\r\n  return <div>This component is loaded lazily</div>;\r\n}`\r\n      },\r\n      {\r\n        title: 'Virtual Scrolling for Large Lists',\r\n        code: `import { FixedSizeList as List } from 'react-window';\r\n\r\nfunction VirtualizedList({ items }) {\r\n  const Row = ({ index, style }) => (\r\n    <div style={style}>\r\n      {items[index].name}\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <List\r\n      height={400}\r\n      itemCount={items.length}\r\n      itemSize={35}\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}`\r\n      }\r\n    ]\r\n  }\r\n]; "],"names":["title","examples","code"],"sourceRoot":""}