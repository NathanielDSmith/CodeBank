{"version":3,"file":"static/js/8906.31839110.chunk.js","mappings":"kIAAA,MAwIA,EAxI0B,CACxB,CACEA,MAAO,iCACPC,SAAU,CACR,CACED,MAAO,iCACPE,KAAK,+cAoBP,CACEF,MAAO,sBACPE,KAAK,2dAmBP,CACEF,MAAO,8BACPE,KAAK,0xBA2BX,CACEF,MAAO,4BACPC,SAAU,CACR,CACED,MAAO,oCACPE,KAAK,+tBAqBP,CACEF,MAAO,qCACPE,KAAK,i6B","sources":["data/object/properties.ts"],"sourcesContent":["const propertiesContent = [\r\n  {\r\n    title: 'Working with Object Properties',\r\n    examples: [\r\n      {\r\n        title: 'Adding and changing properties',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30\r\n};\r\n\r\n// Add a new property\r\nperson.city = \"New York\";\r\nconsole.log(person); // { name: \"John\", age: 30, city: \"New York\" }\r\n\r\n// Change an existing property\r\nperson.age = 31;\r\nconsole.log(person.age); // 31\r\n\r\n// Add multiple properties\r\nperson.email = \"john@example.com\";\r\nperson.isActive = true;\r\n\r\nconsole.log(person);\r\n// { name: \"John\", age: 31, city: \"New York\", email: \"john@example.com\", isActive: true }`\r\n      },\r\n      {\r\n        title: 'Removing properties',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: \"New York\",\r\n  email: \"john@example.com\"\r\n};\r\n\r\n// Remove a property using delete\r\ndelete person.email;\r\nconsole.log(person); // { name: \"John\", age: 30, city: \"New York\" }\r\n\r\n// Remove another property\r\ndelete person.city;\r\nconsole.log(person); // { name: \"John\", age: 30 }\r\n\r\n// Check if property exists after deletion\r\nconsole.log(person.hasOwnProperty(\"email\")); // false\r\nconsole.log(person.email); // undefined`\r\n      },\r\n      {\r\n        title: 'Checking property existence',\r\n        code: `const person = {\r\n  name: \"John\",\r\n  age: 30,\r\n  city: undefined  // property exists but value is undefined\r\n};\r\n\r\n// Check if property exists\r\nconsole.log(person.hasOwnProperty(\"name\")); // true\r\nconsole.log(person.hasOwnProperty(\"email\")); // false\r\n\r\n// Another way to check\r\nconsole.log(\"name\" in person); // true\r\nconsole.log(\"email\" in person); // false\r\n\r\n// Check if property has a value (not undefined)\r\nconsole.log(person.name !== undefined); // true\r\nconsole.log(person.city !== undefined); // true (property exists)\r\nconsole.log(person.email !== undefined); // false (property doesn't exist)\r\n\r\n// Safe way to access properties\r\nconst name = person.name || \"Unknown\";\r\nconst email = person.email || \"No email\";\r\nconsole.log(name); // \"John\"\r\nconsole.log(email); // \"No email\"`\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Property Names and Values',\r\n    examples: [\r\n      {\r\n        title: 'Different types of property names',\r\n        code: `const person = {\r\n  name: \"John\",           // normal property name\r\n  age: 30,               // normal property name\r\n  \"first-name\": \"John\",  // property name with special characters\r\n  \"123\": \"number key\",   // property name that's a number (as string)\r\n  \"\": \"empty key\"        // empty string as property name\r\n};\r\n\r\n// Access normal properties with dot notation\r\nconsole.log(person.name); // \"John\"\r\nconsole.log(person.age); // 30\r\n\r\n// Access special property names with bracket notation\r\nconsole.log(person[\"first-name\"]); // \"John\"\r\nconsole.log(person[\"123\"]); // \"number key\"\r\nconsole.log(person[\"\"]); // \"empty key\"\r\n\r\n// You can also use variables\r\nconst propertyName = \"age\";\r\nconsole.log(person[propertyName]); // 30`\r\n      },\r\n      {\r\n        title: 'Property values of different types',\r\n        code: `const product = {\r\n  name: \"Laptop\",                    // string\r\n  price: 999.99,                    // number\r\n  inStock: true,                    // boolean\r\n  colors: [\"black\", \"white\"],       // array\r\n  specs: {                          // object\r\n    ram: \"16GB\",\r\n    storage: \"512GB\"\r\n  },\r\n  getPrice: function() {            // function\r\n    return this.price;\r\n  }\r\n};\r\n\r\n// Access different types of values\r\nconsole.log(product.name); // \"Laptop\" (string)\r\nconsole.log(product.price); // 999.99 (number)\r\nconsole.log(product.inStock); // true (boolean)\r\nconsole.log(product.colors[0]); // \"black\" (array element)\r\nconsole.log(product.specs.ram); // \"16GB\" (nested object)\r\nconsole.log(product.getPrice()); // 999.99 (function call)\r\n\r\n// Change values\r\nproduct.price = 899.99;\r\nproduct.colors.push(\"silver\");\r\nconsole.log(product.price); // 899.99\r\nconsole.log(product.colors); // [\"black\", \"white\", \"silver\"]`\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default propertiesContent; "],"names":["title","examples","code"],"sourceRoot":""}