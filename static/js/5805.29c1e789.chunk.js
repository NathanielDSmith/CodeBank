"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[5805],{5805:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});const s=[{title:"React useEffect Hook",examples:[{title:"Basic useEffect",code:"import { useEffect, useState } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`/api/users/${userId}`);\n        const userData = await response.json();\n        setUser(userData);\n      } catch (error) {\n        console.error('Failed to fetch user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchUser();\n  }, [userId]); // Dependency array\n  \n  if (loading) return <div>Loading...</div>;\n  if (!user) return <div>User not found</div>;\n  \n  return <div>Hello, {user.name}!</div>;\n}"},{title:"Cleanup with useEffect",code:"import { useEffect } from 'react';\n\nfunction Timer() {\n  const [count, setCount] = useState(0);\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    \n    // Cleanup function\n    return () => {\n      clearInterval(interval);\n    };\n  }, []); // Empty dependency array = run once\n  \n  return <div>Count: {count}</div>;\n}"},{title:"Multiple useEffect Hooks",code:"import { useEffect, useState } from 'react';\n\nfunction DataFetcher({ userId }) {\n  const [user, setUser] = useState(null);\n  const [posts, setPosts] = useState([]);\n  \n  // Fetch user data\n  useEffect(() => {\n    fetch(`/api/users/${userId}`)\n      .then(res => res.json())\n      .then(setUser);\n  }, [userId]);\n  \n  // Fetch user posts\n  useEffect(() => {\n    if (user) {\n      fetch(`/api/users/${userId}/posts`)\n        .then(res => res.json())\n        .then(setPosts);\n    }\n  }, [user, userId]);\n  \n  return (\n    <div>\n      {user && <h1>{user.name}</h1>}\n      {posts.map(post => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  );\n}"},{title:"Conditional useEffect",code:"import { useEffect, useState } from 'react';\n\nfunction SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  \n  useEffect(() => {\n    // Only search if query has at least 3 characters\n    if (query.length >= 3) {\n      setLoading(true);\n      \n      const searchTimeout = setTimeout(async () => {\n        try {\n          const response = await fetch(`/api/search?q=${query}`);\n          const data = await response.json();\n          setResults(data.results);\n        } catch (error) {\n          console.error('Search failed:', error);\n        } finally {\n          setLoading(false);\n        }\n      }, 500); // Debounce search\n      \n      return () => clearTimeout(searchTimeout);\n    } else {\n      setResults([]);\n    }\n  }, [query]);\n  \n  return (\n    <div>\n      {loading && <div>Searching...</div>}\n      {results.map(result => (\n        <div key={result.id}>{result.title}</div>\n      ))}\n    </div>\n  );\n}"},{title:"Custom Hook with useEffect",code:"import { useEffect, useState } from 'react';\n\n// Custom hook for API calls\nfunction useApi(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        \n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return { data, loading, error };\n}\n\n// Usage\nfunction UserList() {\n  const { data: users, loading, error } = useApi('/api/users');\n  \n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  \n  return (\n    <div>\n      {users.map(user => (\n        <div key={user.id}>{user.name}</div>\n      ))}\n    </div>\n  );\n}"}]}]}}]);
//# sourceMappingURL=5805.29c1e789.chunk.js.map