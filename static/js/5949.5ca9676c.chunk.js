"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[5949],{5949:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r=[{title:"Creating a Package",code:'// mathutils/math.go\npackage mathutils\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc Multiply(a, b int) int {\n    return a * b\n}\n\nfunc IsEven(n int) bool {\n    return n%2 == 0\n}\n\n// main.go\npackage main\n\nimport (\n    "fmt"\n    "./mathutils"\n)\n\nfunc main() {\n    result := mathutils.Add(5, 3)\n    fmt.Printf("5 + 3 = %d\\n", result)\n    \n    product := mathutils.Multiply(4, 6)\n    fmt.Printf("4 * 6 = %d\\n", product)\n    \n    fmt.Printf("Is 10 even? %t\\n", mathutils.IsEven(10))\n}'},{title:"Package with Init Function",code:'// config/config.go\npackage config\n\nimport "fmt"\n\nvar AppName string\nvar Version string\n\nfunc init() {\n    AppName = "MyApp"\n    Version = "1.0.0"\n    fmt.Println("Config package initialized")\n}\n\nfunc GetInfo() string {\n    return fmt.Sprintf("%s v%s", AppName, Version)\n}\n\n// main.go\npackage main\n\nimport (\n    "fmt"\n    "./config"\n)\n\nfunc main() {\n    fmt.Println(config.GetInfo())\n}'},{title:"Go Modules (go.mod)",code:'// go.mod\nmodule myproject\n\ngo 1.21\n\nrequire (\n    github.com/gorilla/mux v1.8.0\n    github.com/joho/godotenv v1.4.0\n)\n\n// main.go\npackage main\n\nimport (\n    "fmt"\n    "github.com/gorilla/mux"\n    "github.com/joho/godotenv"\n)\n\nfunc main() {\n    // Load environment variables\n    godotenv.Load()\n    \n    // Create router\n    r := mux.NewRouter()\n    \n    r.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintf(w, "Hello from Go module!")\n    })\n    \n    fmt.Println("Server starting...")\n    http.ListenAndServe(":8080", r)\n}'},{title:"Package with Exported and Unexported",code:'// user/user.go\npackage user\n\nimport "fmt"\n\n// Exported (capitalized) - accessible from other packages\ntype User struct {\n    Name string\n    Age  int\n}\n\n// Unexported (lowercase) - only accessible within this package\ntype userConfig struct {\n    maxAge int\n    minAge int\n}\n\n// Exported function\nfunc NewUser(name string, age int) *User {\n    config := getUserConfig()\n    \n    if age < config.minAge || age > config.maxAge {\n        return nil\n    }\n    \n    return &User{Name: name, Age: age}\n}\n\n// Unexported function\nfunc getUserConfig() userConfig {\n    return userConfig{minAge: 0, maxAge: 150}\n}\n\n// Exported method\nfunc (u *User) Display() {\n    fmt.Printf("User: %s, Age: %d\\n", u.Name, u.Age)\n}\n\n// main.go\npackage main\n\nimport (\n    "fmt"\n    "./user"\n)\n\nfunc main() {\n    newUser := user.NewUser("Alice", 30)\n    if newUser != nil {\n        newUser.Display()\n    }\n}'},{title:"Package with Interface",code:'// storage/storage.go\npackage storage\n\ntype Storage interface {\n    Save(key string, value string) error\n    Get(key string) (string, error)\n    Delete(key string) error\n}\n\n// memory/memory.go\npackage memory\n\nimport "fmt"\n\ntype MemoryStorage struct {\n    data map[string]string\n}\n\nfunc NewMemoryStorage() *MemoryStorage {\n    return &MemoryStorage{\n        data: make(map[string]string),\n    }\n}\n\nfunc (m *MemoryStorage) Save(key, value string) error {\n    m.data[key] = value\n    return nil\n}\n\nfunc (m *MemoryStorage) Get(key string) (string, error) {\n    value, exists := m.data[key]\n    if !exists {\n        return "", fmt.Errorf("key not found: %s", key)\n    }\n    return value, nil\n}\n\nfunc (m *MemoryStorage) Delete(key string) error {\n    delete(m.data, key)\n    return nil\n}\n\n// main.go\npackage main\n\nimport (\n    "fmt"\n    "./storage"\n    "./memory"\n)\n\nfunc main() {\n    var store storage.Storage = memory.NewMemoryStorage()\n    \n    store.Save("name", "Alice")\n    store.Save("age", "30")\n    \n    name, _ := store.Get("name")\n    age, _ := store.Get("age")\n    \n    fmt.Printf("Name: %s, Age: %s\\n", name, age)\n}'}]}}]);
//# sourceMappingURL=5949.5ca9676c.chunk.js.map