"use strict";(self.webpackChunkcodebank=self.webpackChunkcodebank||[]).push([[1152],{1152:(n,e,s)=>{s.r(e),s.d(e,{default:()=>t});const t=[{title:"Channels Basics",examples:[{title:"Simple channel",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    // Create a channel for strings\n    messageChannel := make(chan string)\n    \n    // Send a message in a goroutine\n    go func() {\n        messageChannel <- "Hello from goroutine!"\n    }()\n    \n    // Receive the message in main\n    message := <-messageChannel\n    fmt.Println(message)\n    \n    fmt.Println("Main function ends")\n}'},{title:"Channel with multiple messages",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc sendMessages(ch chan string) {\n    messages := []string{"Hello", "World", "from", "Go"}\n    \n    for _, msg := range messages {\n        ch <- msg\n        time.Sleep(100 * time.Millisecond)\n    }\n    \n    // Close the channel when done\n    close(ch)\n}\n\nfunc main() {\n    // Create channel\n    ch := make(chan string)\n    \n    // Start sender goroutine\n    go sendMessages(ch)\n    \n    // Receive messages\n    for message := range ch {\n        fmt.Println("Received:", message)\n    }\n    \n    fmt.Println("All messages received!")\n}'}]},{title:"Buffered Channels",examples:[{title:"Buffered channel example",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    // Create a buffered channel (can hold 3 messages)\n    ch := make(chan string, 3)\n    \n    // Send messages (won\'t block until buffer is full)\n    ch <- "First message"\n    ch <- "Second message"\n    ch <- "Third message"\n    \n    fmt.Println("Sent 3 messages to buffered channel")\n    \n    // Receive messages\n    fmt.Println("Receiving messages:")\n    fmt.Println(<-ch)\n    fmt.Println(<-ch)\n    fmt.Println(<-ch)\n    \n    fmt.Println("All messages received!")\n}'},{title:"Select statement",code:'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n    \n    // Send to first channel\n    go func() {\n        time.Sleep(1 * time.Second)\n        ch1 <- "Message from channel 1"\n    }()\n    \n    // Send to second channel\n    go func() {\n        time.Sleep(500 * time.Millisecond)\n        ch2 <- "Message from channel 2"\n    }()\n    \n    // Select waits for whichever channel is ready first\n    for i := 0; i < 2; i++ {\n        select {\n        case msg1 := <-ch1:\n            fmt.Println("Received from ch1:", msg1)\n        case msg2 := <-ch2:\n            fmt.Println("Received from ch2:", msg2)\n        case <-time.After(2 * time.Second):\n            fmt.Println("Timeout!")\n        }\n    }\n}'}]}]}}]);
//# sourceMappingURL=1152.b8da5549.chunk.js.map